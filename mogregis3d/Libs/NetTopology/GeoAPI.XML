<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeoAPI</name>
    </assembly>
    <members>
        <member name="M:GeoAPI.Geometries.ISpatialRelation.EqualsExact(GeoAPI.Geometries.IGeometry)">
            <summary>
            Returns true if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/> instances
            are exactly equal.
            Two <see cref="T:GeoAPI.Geometries.IGeometry`1"/> instances are exactly equal iff:
            <list type="bullet">
            <item><description>they have the same class,</description></item>
            <item><description>
            they have the same values of coordinates in their internal
            coordinate sequences, in exactly the same order.
            </description></item>
            </list>
            If this and the other <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s are
            composites and any children are not <see cref="T:GeoAPI.Geometries.IGeometry`1"/> 
            instances, returns <see langword="false"/>.
            This provides a stricter test of equality than <see cref="M:GeoAPI.Geometries.ISpatialRelation.Equals(GeoAPI.Geometries.IGeometry,GeoAPI.Coordinates.Tolerance)"/>.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which to 
            compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if this and the other 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            are of the same class and have equal internal data.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IGeometry.AsBinary">
            <summary>
            Returns the Well-Known Binary representation of this 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </summary>
            <remarks>
            For a definition of the Well-Known Binary format, see the OpenGIS Simple
            Features Specification.
            </remarks>
            <returns>
            The Well-Known Binary representation of this 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IGeometry.AsText">
            <summary>
            Returns the Well-Known Text representation of this 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </summary>
            <remarks>
            For a definition of the Well-Known Text format, see the OpenGIS Simple
            Features Specification.
            </remarks>
            <returns>
            The Well-Known Text representation of this 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </returns>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometry.Dimension">
            <summary>
            The inherent dimension of this geometric object, which must be 
            less than or equal to the coordinate dimension.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometry.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this geometry is the empty geometry.
            If true, then this geometry represents the empty point set, ∅, for the 
            coordinate space.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometry.IsSimple">
            <summary>
            Returns <see langword="true"/> if the geometry has no anomalous geometric 
            points, such as self intersection or self tangency. The description of each 
            instantiable geometric class will include the specific conditions that cause 
            an instance of that class to be classified as not simple.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometry.SpatialReference">
            <summary>
            Gets the spatial reference system associated with the geometry.
            </summary>
        </member>
        <member name="T:GeoAPI.Geometries.ILineal">
            Identifies {@link Geometry} subclasses which
            are 1-dimensional and have components which are {@link LineStrings}.
        </member>
        <member name="T:GeoAPI.Indexing.IBoundable`1">
            <summary>
            A bounded object in a spatial index.
            </summary>
            <typeparam name="TBounds">The type used to describe the bounds.</typeparam>
        </member>
        <member name="T:GeoAPI.DataStructures.IIntersectable`1">
            <summary>
            Describes an object which can be intersected by an item of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of item to determine intersection with.</typeparam>
        </member>
        <member name="M:GeoAPI.DataStructures.IIntersectable`1.Intersects(`0)">
            <summary> 
            Check if the region defined by <paramref name="other"/>
            overlaps (intersects) the region of the <see cref="T:GeoAPI.DataStructures.IIntersectable`1"/>.
            </summary>
            <param name="other">
            The object which the <see cref="T:GeoAPI.DataStructures.IIntersectable`1"/> is
            being checked for overlapping.
            </param>
            <returns>        
            <see langword="true"/> if <paramref name="other"/> and the 
            <see cref="T:GeoAPI.DataStructures.IIntersectable`1"/> overlap.
            </returns>
        </member>
        <member name="P:GeoAPI.Indexing.IBoundable`1.Bounds">
            <summary> 
            Returns a representation of space that encloses the boundable object,
            preferably not much bigger than this <see cref="T:GeoAPI.Indexing.IBoundable`1"/>'s 
            boundary yet fast to test for intersection
            with the bounds of other <see cref="T:GeoAPI.Indexing.IBoundable`1"/> instances.
            </summary>
            <remarks>
            <para>
            The type of object returned depends on the implementation of 
            the client object, such as an <see cref="T:GeoAPI.Indexing.ISpatialIndex`2"/>.
            </para>
            </remarks>
            <returns> 
            A <typeparamref name="TBounds"/> which describes the bounds of the boundable object.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Contains(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Returns <see langword="true"/> if 
            <c><paramref name="g"/>.<see cref="M:GeoAPI.Geometries.ISpatialRelation`1.Within(GeoAPI.Geometries.IGeometry{`0})"/>(this)</c>
            returns <see langword="true"/>.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with 
            which to compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IGeometry`1"/> 
            contains <paramref name="g"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.CoveredBy(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Returns <see langword="true"/> if this geometry is 
            covered by the specified geometry.
            Note the difference between <c>CoveredBy</c> and <c>Within</c>: 
            <c>CoveredBy</c> is a more inclusive relation.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which to compare 
            this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <remarks>
            <para>
            The <see cref="M:GeoAPI.Geometries.ISpatialRelation`1.CoveredBy(GeoAPI.Geometries.IGeometry{`0})"/> predicate has the following equivalent 
            definitions:
            <list type="bullet">
            <item>
            <description>
            Every point of this geometry is a point of the other geometry.
            </description>
            </item>
            <item>
            <description>
            The DE-9IM Intersection Matrix for the two geometries is 
            <c>T*F**F***</c> or <c>*TF**F***</c> or <c>**FT*F***</c> or <c>**F*TF***</c>.
            </description>
            </item>
            <item>
            <description>
            <c>g.Covers(this)</c> (<c>CoveredBy</c> is the inverse of <c>Covers</c>).
            </description>
            </item>
            </list>
            </para>
            </remarks>
            <returns>
            <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IGeometry`1"/> 
            is covered by <paramref name="g"/>.
            </returns>
            <seealso cref="M:GeoAPI.Geometries.ISpatialRelation`1.Within(GeoAPI.Geometries.IGeometry{`0})"/>
            <seealso cref="M:GeoAPI.Geometries.ISpatialRelation`1.Covers(GeoAPI.Geometries.IGeometry{`0})"/>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Covers(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Returns <see langword="true"/> if this geometry covers the 
            specified geometry.  
            </summary>
            <remarks>
            <para>
            The <c>Covers</c> predicate has the following equivalent definitions:
                - Every point of the other geometry is a point of this geometry.
                - The DE-9IM Intersection Matrix for the two geometries is <c>T*****FF*</c> 
                  or <c>*T****FF*</c> or <c>***T**FF*</c> or <c>****T*FF*</c>.
                - <c>g.CoveredBy(this)</c> (<c>Covers</c> is the inverse of <c>CoveredBy</c>).
            </para>
            Note the difference between <c>Covers</c> and <c>Contains</c>: 
            <see cref="M:GeoAPI.Geometries.ISpatialRelation`1.Covers(GeoAPI.Geometries.IGeometry{`0})"/> is a more inclusive relation.
            In particular, unlike <c>Contains</c> it does not distinguish between
            points in the boundary and in the interior of geometries.      
            <para>
            For most situations, <c>Covers</c> should be used 
            in preference to <c>Contains</c>.
            As an added benefit, <c>Covers</c> is more amenable to 
            optimization, and hence should be more highly performing.
            </para>
            </remarks>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which to compare 
            this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IGeometry`1"/> 
            covers <paramref name="g"/>.
            </returns>
            <seealso cref="!:IGeometry&lt;TCoordinate&gt;.Contains(IGeometry&lt;TCoordinate&gt;)"/>
            <seealso cref="!:IGeometry&lt;TCoordinate&gt;.Contains(IGeometry&lt;TCoordinate&gt;, Tolerance)"/>
            <seealso cref="!:IGeometry&lt;TCoordinate&gt;.Covers(IGeometry&lt;TCoordinate&gt;, Tolerance)"/>
            <seealso cref="!:IGeometry&lt;TCoordinate&gt;.CoveredBy"/>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Crosses(GeoAPI.Geometries.IGeometry{`0})">
            <summary>  
            Returns <see langword="true"/> if the DE-9IM intersection matrix 
            for the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s is
             T*T****** (for a point and a curve, a point and an area or a line
            and an area) 0******** (for two curves).
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which 
            to compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s 
            cross.
            For this function to return <see langword="true"/>, 
            the <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s must be a point and a curve; 
            a point and a surface; two curves; or a curve and a surface.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Disjoint(GeoAPI.Geometries.IGeometry{`0})">
            <summary>  
            Returns <see langword="true"/> if the DE-9IM intersection matrix 
            for the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s is FF*FF****.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which 
            to compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the two 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s are disjoint.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GeoAPI.Geometries.ISpatialRelation`1.Equals(GeoAPI.Geometries.IGeometry{`0},GeoAPI.Coordinates.Tolerance)" -->
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Intersects(GeoAPI.Geometries.IGeometry{`0})">
            <summary>  
            Returns <see langword="true"/> if 
            <see cref="M:GeoAPI.Geometries.ISpatialRelation`1.Disjoint(GeoAPI.Geometries.IGeometry{`0})"/> returns 
            <see langword="false"/>.
            </summary>
            <param name="g">The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with 
            which to compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s 
            intersect.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.IsWithinDistance(GeoAPI.Geometries.IGeometry{`0},System.Double)">
            <summary> 
            Tests whether the distance from this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            to another is less than or equal to a specified value.
            </summary>
            <param name="g">the Geometry to check the distance to.</param>
            <param name="distance">the distance value to compare.</param>
            <returns>
            <see langword="true"/> if the geometries are less than 
            <paramref name="distance"/> apart.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Overlaps(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Returns <see langword="true"/> if the DE-9IM intersection matrix for the two
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s is
             T*T***T** (for two points or two surfaces)
             1*T***T** (for two curves).
            </summary>
            <param name="g">The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with 
            which to compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s 
            overlap. For this function to return <see langword="true"/>, 
            the <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s must be two points, 
            two curves or two surfaces.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Relate(GeoAPI.Geometries.IGeometry{`0},System.String)">
            <summary>  
            Returns <see langword="true"/> if the elements in the DE-9IM intersection
            matrix for the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s match the elements in 
            <paramref name="intersectionPattern"/>.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which 
            to compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <param name="intersectionPattern">
            The pattern against which to check the intersection matrix 
            for the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s.
            </param>
            <returns><see langword="true"/> if the DE-9IM intersection matrix 
            for the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s match 
            <paramref name="intersectionPattern"/>.
            </returns>
            <remarks>
            The elements in <paramref name="intersectionPattern"/> may be:
             0
             1
             2
             T ( = 0, 1 or 2)
             F ( = -1)
             * ( = -1, 0, 1 or 2)
            For more information on the DE-9IM, see the OpenGIS Simple Features
            Specification.
            </remarks>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Relate(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Returns the DE-9IM intersection matrix for the two 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which to 
            compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            A matrix describing the intersections of the interiors,
            boundaries and exteriors of the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Touches(GeoAPI.Geometries.IGeometry{`0})">
            <summary>  
            Returns <see langword="true"/> if the DE-9IM intersection matrix for the two
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s is FT*******, F**T***** or F***T****.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which to 
            compare this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s 
            touch; Returns false if both <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s are points.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.ISpatialRelation`1.Within(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Returns <see langword="true"/> if the DE-9IM intersection matrix for the two
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s is T*F**F***.
            </summary>
            <param name="g">
            The <see cref="T:GeoAPI.Geometries.IGeometry`1"/> with which to compare 
            this <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IGeometry`1"/> 
            is within <paramref name="g"/>.
            </returns>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometry`1.SpatialReference">
            <summary>
            Gets the spatial reference system associated with the geometry.
            </summary>
        </member>
        <member name="T:GeoAPI.Geometries.IPuntal">
            Identifies {@link Geometry} subclasses which
            are 0-dimensional and with components which are {@link Points}. 
        </member>
        <member name="T:GeoAPI.DataStructures.Interval">
            <summary> 
            Represents an (1-dimensional) closed interval on the Real number line (ℝ).
            </summary>
        </member>
        <member name="T:GeoAPI.DataStructures.IContainable`1">
            <summary>
            Describes an object which can contain an item of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of item to determine the contain status with.</typeparam>
        </member>
        <member name="M:GeoAPI.DataStructures.IContainable`1.Contains(`0)">
            <summary> 
            Check if the region defined by <paramref name="other"/>
            is contained by the region of the <see cref="T:GeoAPI.DataStructures.IContainable`1"/>.
            </summary>
            <param name="other">
            The object which the <see cref="T:GeoAPI.DataStructures.IContainable`1"/> is
            being checked for containment.
            </param>
            <returns>        
            <see langword="true"/> if <see cref="T:GeoAPI.DataStructures.IContainable`1"/> contains <paramref name="other"/>.
            </returns>
        </member>
        <member name="T:GeoAPI.DataStructures.IExpandable`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:GeoAPI.DataStructures.IExpandable`1.ExpandToInclude(`0)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:GeoAPI.DataStructures.Interval.Zero">
            <summary>
             An empty interval [0, 0]
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.Interval.Infinite">
            <summary>
            An open interval ]NegativeInfinity, PositiveInfinity[
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="min">the lower bound of the interval</param>
            <param name="max">the upper bound of the interval</param>
        </member>
        <member name="M:GeoAPI.DataStructures.Interval.#ctor(GeoAPI.DataStructures.Interval)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="interval">the interval</param>
        </member>
        <member name="M:GeoAPI.DataStructures.Interval.ExpandToInclude(GeoAPI.DataStructures.Interval)">
            <summary>
            
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Interval.Intersects(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Interval.Contains(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Interval.Contains(System.Double)">
            <summary>
            Checks whether a value is within the bounds of the interval
            </summary>
            <param name="value">the value</param>
            <returns>true if the value is within the bounds of this interval </returns>
        </member>
        <member name="P:GeoAPI.DataStructures.Interval.Center">
            <summary>
             
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Interval.Min">
            <summary>
            Gets the lower bound of the interval
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Interval.Max">
            <summary>
            Gets the upper bound of the interval
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Interval.Width">
            <summary>
            Gets the width of the interval
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory`1">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory">
            <summary>
            Creates coordinate transformations.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory.CreateFromCoordinateSystems(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem)">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to construct
            a transformation between them. This method may fail if no path between 
            the coordinate systems is found, using the normal failing behavior of 
            the DCP (e.g. throwing an exception).</remarks>
            <param name="source">Source coordinate system</param>
            <param name="target">Target coordinate system</param>
            <returns>
            An <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> which converts 
            coordinates in <paramref name="source"/> to coordinates in <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory`1.CreateFromCoordinateSystems(GeoAPI.CoordinateSystems.ICoordinateSystem{`0},GeoAPI.CoordinateSystems.ICoordinateSystem{`0})">
            <summary>
            Creates a transformation between two coordinate systems.
            </summary>
            <remarks>
            This method will examine the coordinate systems in order to construct
            a transformation between them. This method may fail if no path between 
            the coordinate systems is found, using the normal failing behavior of 
            the DCP (e.g. throwing an exception).</remarks>
            <param name="source">Source coordinate system</param>
            <param name="target">Target coordinate system</param>
            <returns>
            An <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation`1"/> which converts 
            coordinates in <paramref name="source"/> to coordinates in <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Derivative(GeoAPI.Coordinates.ICoordinate)">
            <summary>
            Gets the derivative of this transform at a point.
            </summary>
            <remarks>
            If the transform does not have a well-defined derivative at the point, then 
            this function should fail in the usual way for the DCP. The derivative is 
            the matrix of the non-translating portion of the approximate affine map at the point. 
            The matrix will have dimensions corresponding to the source and target 
            coordinate systems. If the input dimension is M, and the output dimension 
            is N, then the matrix will have size [M][N]. The elements of the matrix 
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is 
            parallel to the displacement caused by a small change in the m'th ordinate 
            in the input space.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform.GetCodomainConvexHull(System.Collections.Generic.IEnumerable{GeoAPI.Coordinates.ICoordinate})">
            <summary>
            Gets transformed convex hull.
            </summary>
            <remarks>
            <para>
            The supplied ordinates are interpreted as a sequence of points, which generates a convex
            hull in the source space. The returned sequence of ordinates represents a convex hull in the 
            output space. The number of output points will often be different from the number of input 
            points. Each of the input points should be inside the valid domain (this can be checked by 
            testing the points' domain flags individually). However, the convex hull of the input points
            may go outside the valid domain. The returned convex hull should contain the transformed image
            of the intersection of the source convex hull and the source domain.
            </para>
            <para>
            A convex hull is a shape in a coordinate system, where if two positions A and B are 
            inside the shape, then all positions in the straight line between A and B are also inside 
            the shape. So in 3D a cube and a sphere are both convex hulls. Other less obvious examples 
            of convex hulls are straight lines, and single points. (A single point is a convex hull, 
            because the positions A and B must both be the same - i.e. the point itself. So the straight
            line between A and B has zero length.)
            </para>
            <para>
            Some examples of shapes that are NOT convex hulls are donuts, and horseshoes.
            </para>
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform.GetDomainFlags(System.Collections.Generic.IEnumerable{GeoAPI.Coordinates.ICoordinate})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
            The supplied ordinates are interpreted as a sequence of points, which 
            generates a convex hull in the source space. Conceptually, each of the 
            (usually infinite) points inside the convex hull is then tested against
            the source domain. The flags of all these tests are then combined. In 
            practice, implementations of different transforms will use different 
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Transform(GeoAPI.Coordinates.ICoordinate)">
            <summary>
            Transforms a coordinate point. The passed parameter point should not be modified.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Transform(System.Collections.Generic.IEnumerable{GeoAPI.Coordinates.ICoordinate})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Transform(GeoAPI.Coordinates.ICoordinateSequence)">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.SourceDimension">
            <summary>
            Gets the dimension of input points.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.TargetDimension">
            <summary>
            Gets the dimension of output points.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.IsIdentity">
            <summary>
            Tests whether this transform does not move any points.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.IsInverse">
            <summary>
            Returns <see langword="true"/> if this projection is inverted.
            </summary>
            <remarks>
            Most map projections define forward projection as 
            "from geographic to projection", and backwards
            as "from projection to geographic". If this projection 
            is inverted, this will be the other way around.
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Inverse">
            <summary>
            Gets the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one. 
            However, all cartographic projections should succeed.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Wkt">
            <summary>
            Gets the Well-Known Text for this spatial reference object
            as defined in the OGC Coordinate Transformation Services 
            specification.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform.Xml">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IPrimeMeridian">
            <summary>
            The IPrimeMeridian interface defines the standard information stored with prime
            meridian objects. Any prime meridian object must implement this interface as
            well as the ISpatialReferenceInfo interface.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IInfo">
            <summary>
            The <see cref="T:GeoAPI.CoordinateSystems.IInfo"/> interface defines the standard 
            information stored with spatial reference objects. This
            interface is reused for many of the spatial reference
            objects in the system.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.IInfo.EqualParams(GeoAPI.CoordinateSystems.IInfo)">
            <summary>
            Checks whether the values of this instance is equal to the values 
            of another instance. Only parameters used for coordinate system 
            are used for comparison. Name, abbreviation, authority, alias and 
            remarks are ignored in the comparison.
            </summary>
            <param name="other">The info object to compare parameters with.</param>
            <returns>
            <see langword="true"/> if the parameters are equal between the 
            <see cref="T:GeoAPI.CoordinateSystems.IInfo"/> objects, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Authority">
            <summary>
            Gets the authority which defined transformation and parameter values.
            </summary>
            <remarks>
            An authority is an organization that maintains definitions of 
            spatial reference objects. For example the European Petroleum 
            Survey Group (EPSG) maintains a database of coordinate systems, 
            and other spatial referencing objects.
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.AuthorityCode">
            <summary>
            Code used by an <see cref="P:GeoAPI.CoordinateSystems.IInfo.Authority"/> to identify a
            spatial reference object. <see langword="null"/> is used for no code.
            </summary>
            <remarks>
            The authority code is a <see cref="T:System.String"/> 
            defined by an authority to reference a particular spatial 
            reference object. For example, the European Survey Group (EPSG) 
            authority uses 32 bit integers to reference coordinate systems, 
            so all their code strings will consist of a few digits. 
            The EPSG code for WGS84 Lat/Lon is "4326".
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Alias">
            <summary>
            Gets the alias of the object.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Abbreviation">
            <summary>
            Gets the abbreviation of the object.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Remarks">
            <summary>
            Gets the provider-supplied remarks for the object.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Wkt">
            <summary>
            Gets the Well-Known Text for this spatial reference object
            as defined in the OGC Simple Features for SQL and
            Coordinate Transformation Services specifications.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IInfo.Xml">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IPrimeMeridian.Longitude">
            <summary>
            Gets or sets the longitude of the prime meridian (relative to the Greenwich prime meridian).
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IPrimeMeridian.AngularUnit">
            <summary>
            Gets or sets the AngularUnits.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystem.GetAxis(System.Int32)">
            <summary>
            Gets axis details for dimension within coordinate system.
            </summary>
            <param name="dimension">Dimension</param>
            <returns>Axis info</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystem.GetUnits(System.Int32)">
            <summary>
            Gets units for dimension within coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICoordinateSystem.Dimension">
            <summary>
            Dimension of the coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICoordinateSystem.DefaultEnvelope">
            <summary>
            Gets default envelope of coordinate system.
            </summary>
            <remarks>
            Gets default envelope of coordinate system. Coordinate systems 
            which are bounded should return the minimum bounding box of their 
            domain. Unbounded coordinate systems should return a box which is 
            as large as is likely to be used. For example, a (lon, lat) 
            geographic coordinate system in degrees should return a box from 
            (-180, -90) to (180, 90), and a geocentric coordinate system could 
            return a box from (-r, -r, -r) to (+r, +r, +r) where r is the 
            approximate radius of the Earth.
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem.HeadCoordinateSystem">
            <summary>
            Gets first sub-coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem.TailCoordinateSystem">
            <summary>
            Gets second sub-coordinate system.
            </summary>
        </member>
        <member name="T:GeoAPI.DataStructures.DoubleBits">
            <summary>
            <see cref="T:GeoAPI.DataStructures.DoubleBits"/> manipulates <see cref="P:GeoAPI.DataStructures.DoubleBits.Double"/> numbers
            by using bit manipulation and bit-field extraction.
            For some operations (such as determining the exponent)
            this is more accurate than using mathematical operations
            (which suffer from round-off error).
            The algorithms and constants in this class
            apply only to IEEE-754 double-precision floating point format.
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.ExponentBias">
            <summary>
            Value to add to the exponent in order to make it positive. This
            avoids using using two's-complement in the exponent, which inverts the 
            values of the double value's exponents bits for negative exponents.
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.ExponentMaxBiasValue">
            <summary>
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.SignificandBitCount">
            <summary>
            The number of bits in the floating point's significand.
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.ExponentBitCount">
            <summary>
            The number of bits in the floating point's exponent.
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.DoubleBits.PowerOf2(System.Int32)">
            <summary>
            Generates a <see cref="P:GeoAPI.DataStructures.DoubleBits.Double"/> having the value
            of 2 raised to the power of <paramref name="exp"/>.
            </summary>
            <param name="exp">The power to raise 2 to.</param>
            <returns>The value of 2 raised to the given power.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="exp"/> is greater than <value>1023</value>
            or less than <value>-1022</value>.
            </exception>
        </member>
        <member name="M:GeoAPI.DataStructures.DoubleBits.GetExponent(System.Double)">
            <summary>
            Computes the exponent of a double floating point 
            value.
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.DoubleBits.ZeroLowerBits(System.Int32)">
            <summary>
            Creates a new <see cref="T:GeoAPI.DataStructures.DoubleBits"/> value
            with the lower <paramref name="bitCount"/> bits
            set to 0.
            </summary>
            <param name="bitCount">The number of bits to set to 0.</param>
            <returns>
            A <see cref="T:GeoAPI.DataStructures.DoubleBits"/> structure with the <paramref name="bitCount"/>
            lower bits set to 0.
            </returns>
        </member>
        <member name="M:GeoAPI.DataStructures.DoubleBits.GetCommonSignificandBitsCount(GeoAPI.DataStructures.DoubleBits)">
            <summary> 
            This computes the number of common most-significant bits in the significand.
            It does not count the hidden bit, which is always 1.
            It does not determine whether the numbers have the same exponent - if they do
            not, the value computed by this function is meaningless.
            </summary>
            <returns> The number of common most-significant significand bits.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.DoubleBits.ToString">
            <summary>
            A representation of the double bits formatted for easy readability.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.DoubleBits.BiasedExponent">
            <summary>
            Gets the raw exponent value for the double-floating point value. 
            The raw exponent value is the exponent biased by 
            <see cref="F:GeoAPI.DataStructures.DoubleBits.ExponentBias"/> in order to remain positive.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.DoubleBits.Exponent">
            <summary>
            Gets the exponent for the double value.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.DoubleBits.Item(System.Int32)">
            <summary>
            Gets the bit at the given <paramref name="index"/>.
            </summary>
            <param name="index">Index of the bit to retrieve.</param>
            <returns>The value of the bit at <paramref name="index"/>.</returns>
        </member>
        <member name="T:GeoAPI.DataStructures.DoubleBits.Fields">
            <summary>
            Masks for Double defining components
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.Fields.Sign">
            <summary>
            Sign bit mask
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.Fields.Exponent">
            <summary>
            Exponent bits mask
            </summary>
        </member>
        <member name="F:GeoAPI.DataStructures.DoubleBits.Fields.Significand">
            <summary>
            Significand bits mask
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.Assert">
            <summary>
            A utility for making programming assertions.
            </summary>
        </member>
        <member name="T:GeoAPI.Operations.Buffer.BufferParameters">
            <summary>
             Contains the parameters which describe how a buffer should be constructed.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.DefaultQuadrantSegments">
            <summary>
             The default number of facets into which to divide a fillet of 90 degrees.
             A value of 8 gives less than 2% max error in the buffer distance.
             For a max error of &lt; 1%, use QS = 12.
             For a max error of &lt; 0.1%, use QS = 18.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.DefaultMitreLimit">
            <summary>
             The default mitre limit Allows fairly pointy mitres.
            </summary>
        </member>
        <member name="M:GeoAPI.Operations.Buffer.BufferParameters.#ctor(System.Int32)">
            <summary>
             Creates a set of parameters with the given quadrantSegments value.
            </summary>
            <param name="quadrantSegments">the number of quadrant segments to use</param>
        </member>
        <member name="M:GeoAPI.Operations.Buffer.BufferParameters.#ctor(System.Int32,GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle)">
            <summary>
             Creates a set of parameters with the given quadrantSegments and endCapStyle values.
            </summary>
            <param name="quadrantSegments">the number of quadrant segments to use</param>
            <param name="endCapStyle">the end cap style to use</param>
        </member>
        <member name="M:GeoAPI.Operations.Buffer.BufferParameters.#ctor(System.Int32,GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle,GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle,System.Double)">
            <summary>
             Creates a set of parameters with the given parameter values.
            </summary>
            <param name="quadrantSegments">the number of quadrant segments to use</param>
            <param name="endCapStyle">the end cap style to use</param>
            <param name="joinStyle">the join style to use</param>
            <param name="mitreLimit">the mitre limit to use</param>
        </member>
        <member name="M:GeoAPI.Operations.Buffer.BufferParameters.BufferDistanceError(System.Int32)">
            <summary>
             Computes the maximum distance error due to a given level
             of approximation to a true arc.
            </summary>
            <param name="quadSegs">the number of segments used to approximate a quarter-circle</param>
            <returns>the error of approximation</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GeoAPI.Operations.Buffer.BufferParameters.QuadrantSegments" -->
        <member name="P:GeoAPI.Operations.Buffer.BufferParameters.EndCapStyle">
            <summary>
             Gets/Sets the end cap style of the generated buffer.
             The styles supported are <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapRound"/>, <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapFlat"/>, <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapSquare"/>.
             The default is <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapRound"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Operations.Buffer.BufferParameters.JoinStyle">
            <summary>
             Gets/Sets the join style for outside (reflex) corners between line segments.
             Allowable values are <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle.JoinRound"/> (which is default), <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle.JoinMitre"/>, <see cref="F:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle.JoinBevel"/>
            </summary>
        </member>
        <member name="P:GeoAPI.Operations.Buffer.BufferParameters.MitreLimit">
            <summary>
             Gets/Sets the limit on the mitre ratio used for very sharp corners.
             to the end of the mitred offset corner.
             When two line segments meet at a sharp angle, 
             a miter join will extend far beyond the original geometry.
             (and in the extreme case will be infinitely far.)
             To prevent unreasonable geometry, the mitre limit 
             allows controlling the maximum length of the join corner.
             Corners with a ratio which exceed the limit will be beveled.
            </summary>
        </member>
        <member name="P:GeoAPI.Operations.Buffer.BufferParameters.IsSingleSided">
            <value>
             Defines whether the buffer is to be generated on a single side only.
            </value>
            <remarks>
             A single-sided buffer is constructed on only one side of each input line.
             The side used is determined by the sign of the buffer distance:
             <list type="Bullet">
             <item>A positive distance indicates the right-hand side</item>
             <item>A negative distance indicates the left-hand side</item>
             </list>
             The single-sided buffer of point geometries is 
             the same as the regular buffer.
            </remarks>
        </member>
        <member name="T:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle">
            <summary>
             Specifies the EndCap Style for the buffer operation
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapRound">
            <summary>Specifies a round line buffer end cap style.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapFlat">
            <summary>Specifies a flat line buffer end cap style.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.BufferEndCapStyle.CapSquare">
            <summary>Specifies a square line buffer end cap style.
            </summary>
        </member>
        <member name="T:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle">
            <summary>
             Specifies the Join Style for the buffer operation
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle.JoinRound">
            <summary>
             Specifies a round join style.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle.JoinMitre">
            <summary>
             Specifies a mitre join style.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferParameters.BufferJoinStyle.JoinBevel">
            <summary>
             Specifies a bevel join style.
            </summary>
        </member>
        <member name="T:GeoAPI.Indexing.ISpatialIndex`2">
            <summary> 
            The basic insertion and query operations supported by classes
            implementing spatial index algorithms.
            </summary>
            <remarks>
            A spatial index typically provides a primary filter for range rectangle queries. A
            secondary filter is required to test for exact intersection. Of course, this
            secondary filter may consist of other tests besides intersection, such as
            testing other kinds of spatial relationships.
            </remarks>
        </member>
        <member name="M:GeoAPI.Indexing.ISpatialIndex`2.Insert(`1)">
            <summary>
            Adds a spatial item with an extent specified by the given
            <paramref name="item"/>'s <see cref="P:GeoAPI.Indexing.IBoundable`1.Bounds"/> 
            to the index. 
            </summary>
        </member>
        <member name="M:GeoAPI.Indexing.ISpatialIndex`2.InsertRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a range of spatial items, each with an extent specified by its
            <see cref="P:GeoAPI.Indexing.IBoundable`1.Bounds"/> to the index. 
            </summary>
        </member>
        <member name="M:GeoAPI.Indexing.ISpatialIndex`2.Remove(`1)">
            <summary>
            Removes a spatial item from the index.
            </summary>
            <returns>
            <see langword="true"/> if an item was matched and removed successfully;
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Indexing.ISpatialIndex`2.Query(`0)">
            <summary> 
            Queries the index for all <typeparamref name="TItem"/>s whose 
            <see cref="P:GeoAPI.Indexing.IBoundable`1.Bounds"/> intersect the given search 
            <typeparamref name="TBounds"/>.
            </summary>
            <param name="bounds">The bounds to query on.</param>
            <returns>An enumeration of the items found by the query.</returns>
            <remarks>
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query bounds.
            </remarks>
        </member>
        <member name="M:GeoAPI.Indexing.ISpatialIndex`2.Query(`0,System.Predicate{`1})">
            <summary>
            Queries the index for all <typeparamref name="TItem"/>s whose 
            <see cref="P:GeoAPI.Indexing.IBoundable`1.Bounds"/> intersect the given search 
            <typeparamref name="TBounds"/> and which match the given 
            <paramref name="predicate"/>.
            </summary>
            <param name="bounds">The bounds to query on.</param>
            <param name="predicate">A predicate delegate to apply to the items found.</param>
            <returns>An enumeration of the items found by the query.</returns>
            <remarks>
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query bounds. 
            </remarks>
        </member>
        <member name="M:GeoAPI.Indexing.ISpatialIndex`2.Query``1(`0,System.Func{`1,``0})">
            <summary>
            Queries the index for all <typeparamref name="TItem"/>s whose 
            <see cref="P:GeoAPI.Indexing.IBoundable`1.Bounds"/> intersect the given search 
            <typeparamref name="TBounds"/>, and returns the result  of the 
            application of <paramref name="selector"/> over each item.
            </summary>
            <param name="bounds">The bounds to query on.</param>
            <param name="selector">
            The selection function to apply to each item which matches the query bounds.
            </param>
            <typeparam name="TResult">The type of the result to generate.</typeparam>
            <returns>
            An enumeration of <typeparamref name="TResult"/>s which are generated
            by applying <paramref name="selector"/> to each <typeparamref name="TItem"/>
            matching the query <paramref name="bounds"/>.
            </returns>
        </member>
        <member name="P:GeoAPI.Indexing.ISpatialIndex`2.Bounds">
            <summary>
            Gets the bounds of the index.
            </summary>
        </member>
        <member name="T:GeoAPI.Indexing.ISpatialIndexNode`2">
            <summary>
            Represents a node in a spatial index.
            </summary>
            <typeparam name="TBounds">Type of bounds used for index entries.</typeparam>
            <typeparam name="TItem">Type of index entry.</typeparam>
        </member>
        <member name="P:GeoAPI.Indexing.ISpatialIndexNode`2.SubNodeCount">
            <summary>
            Gets the number of subnodes in the <see cref="T:GeoAPI.Indexing.ISpatialIndexNode`2"/>, 
            not counting subnodes' subnodes (grandchildren nodes).
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.ISpatialIndexNode`2.ItemCount">
            <summary>
            Gets the number of items in the <see cref="T:GeoAPI.Indexing.ISpatialIndexNode`2"/>, 
            not counting child node items.
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.ISpatialIndexNode`2.TotalItemCount">
            <summary>
            Gets the count of items in this node and all subnodes.
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.ISpatialIndexNode`2.TotalNodeCount">
            <summary>
            Gets the count of contained <see cref="T:GeoAPI.Indexing.ISpatialIndexNode`2"/>s 
            in this node and all subnodes.
            </summary>
        </member>
        <member name="T:GeoAPI.Indexing.IIndexRestructureStrategy`2">
            <summary>
            Interface for a strategy used to restructure a spatial index.
            </summary>
        </member>
        <member name="M:GeoAPI.Indexing.IIndexRestructureStrategy`2.RestructureNode(GeoAPI.Indexing.ISpatialIndexNode{`0,`1})">
            <summary>
            Restructures a node in the index.
            </summary>
            <param name="node">The spatial index node to restructure.</param>
        </member>
        <member name="T:GeoAPI.Coordinates.PrecisionModelType">
            <summary>
            The types of Precision Model.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.PrecisionModelType.DoubleFloating">
            <summary> 
            The double floating model corresponds to the 
            double-precision floating-point representation specified by the
            IEEE-754 standard.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.PrecisionModelType.SingleFloating">
            <summary>
            The single floating model corresponds to the 
            single-precision floating-point representation specified by the
            IEEE-754 standard.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.PrecisionModelType.Fixed">
            <summary> 
            Fixed precision indicates that coordinates have a fixed number of decimal places.
            The number of decimal places is determined by the log10 of the scale factor.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.PrecisionModelType.QuadFloating">
            <summary>
            The quadruple precision floating model corresponds to the 
            quadruple-precision floating-point representation specified by the
            draft IEEE-754r standard (binary128).
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.PrecisionModelType.DoubleExtendedFloating">
            <summary>
            The double extended floating model corresponds to the 
            double-extended-precision floating-point representation specified by the
            IEEE-754 standard.
            </summary>
        </member>
        <member name="T:GeoAPI.Coordinates.IPrecisionModel`1">
            <summary>
            Specifies the precision model of the <typeparamref name="TCoordinate"/>
            in an <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>. 
            In other words, specifies the grid of allowable points for all geometries. 
            </summary>
            <typeparam name="TCoordinate"></typeparam>
        </member>
        <member name="M:GeoAPI.Coordinates.IPrecisionModel.MakePrecise(System.Double)">
            <summary> 
            Rounds a numeric value to the <see cref="T:GeoAPI.Coordinates.IPrecisionModel"/> 
            grid. Asymmetric arithmetic rounding is used, to provide
            uniform rounding behavior no matter where the number is
            on the number line.
            </summary>
            <param name="value">
            The value to make precise according to the 
            <see cref="T:GeoAPI.Coordinates.IPrecisionModel"/>.
            </param>
        </member>
        <member name="M:GeoAPI.Coordinates.IPrecisionModel.MakePrecise(GeoAPI.Coordinates.ICoordinate)">
            <summary> 
            Rounds a <see name="ICoordinate"/> to the 
            <see cref="T:GeoAPI.Coordinates.IPrecisionModel"/> grid.
            </summary>
            <param name="coord">
            The coordinate to make precise according to the precision model.
            </param>
        </member>
        <member name="P:GeoAPI.Coordinates.IPrecisionModel.CoordinateFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Coordinates.ICoordinateFactory"/> assigned
            to generate new coordinates.
            </summary>
        </member>
        <member name="P:GeoAPI.Coordinates.IPrecisionModel.PrecisionModelType">
            <summary> 
            Gets the type of this <see cref="T:GeoAPI.Coordinates.IPrecisionModel"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Coordinates.IPrecisionModel.IsFloating">
            <summary> 
            Tests whether the precision model supports floating point.
            </summary>
            <returns>
            <see langword="true"/> if the precision model supports floating point.
            </returns>
        </member>
        <member name="P:GeoAPI.Coordinates.IPrecisionModel.MaximumSignificantDigits">
            <summary>
            Returns the maximum number of significant digits provided by this
            precision model.
            Intended for use by routines which need to output precise values.
            </summary>
            <returns>
            The maximum number of decimal places provided by this precision model.
            </returns>
        </member>
        <member name="P:GeoAPI.Coordinates.IPrecisionModel.Scale">
            <summary> 
            Gets the scale factor which determines the number of 
            decimal places in fixed precision.
            </summary>
            <value>    
            The amount by which to multiply a coordinate after subtracting
            the offset.
            </value>
        </member>
        <member name="M:GeoAPI.Coordinates.IPrecisionModel`1.MakePrecise(`0)">
            <summary> 
            Rounds a <typeparamref name="TCoordinate"/> to the 
            <see cref="T:GeoAPI.Coordinates.IPrecisionModel`1"/> grid.
            </summary>
            <param name="coord">
            The coordinate to make precise according to the precision model.
            </param>
        </member>
        <member name="P:GeoAPI.Coordinates.IPrecisionModel`1.CoordinateFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Coordinates.ICoordinateFactory`1"/> assigned
            to generate new coordinates.
            </summary>
        </member>
        <member name="T:GeoAPI.Geometries.IGeometryFactory">
            <summary>
            Interface to a factory object which creates instances of
            <see cref="T:GeoAPI.Geometries.IGeometry"/> and descendents.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometryFactory.CoordinateFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Coordinates.ICoordinateFactory"/> assigned to the
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometryFactory.CoordinateSequenceFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Coordinates.ICoordinateSequenceFactory"/> assigned to the
            <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometryFactory.SpatialReference">
            <summary>
            Gets or sets the spatial reference system to associate with the geometry.
            </summary>
        </member>
        <member name="T:GeoAPI.Coordinates.ICoordinateSequenceFactory`1">
            <summary>
            An object that knows how to build a particular implementation of
            <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> from an array of Coordinates.
            </summary>
            <seealso cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>
        </member>
        <member name="T:GeoAPI.Coordinates.ICoordinateSequenceFactory">
            <summary>
            </summary>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory.Create(System.Collections.Generic.IEnumerable{GeoAPI.Coordinates.ICoordinate})">
            <summary>
            Returns a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> 
            based on the given array; whether or not the array is copied is 
            implementation-dependent.
            </summary>
            <param name="coordinates">
            A coordinates array, which may not be null nor contain null elements.
            </param>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory.Create(GeoAPI.Coordinates.ICoordinateSequence)">
            <summary>
            Creates a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> which is a copy
            of the given <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/>.
            This method must handle null arguments by creating an empty sequence.
            </summary>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory.Create(System.Int32,GeoAPI.Coordinates.CoordinateDimensions)">
            <summary>
            Creates a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> of the 
            specified size and dimension. For this to be useful, the 
            <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> implementation must be mutable.
            </summary>
            <param name="size">
            The initial capacity of the <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/>.
            </param>
            <param name="dimension">
            The dimension of the coordinates in the sequence 
            (if the implementation allows it to be user-specifiable, otherwise ignored).
            </param>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory.Create(GeoAPI.Coordinates.CoordinateDimensions)">
            <summary>
            Creates a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> of the 
            specified size and dimension. For this to be useful, the 
            <see cref="T:GeoAPI.Coordinates.ICoordinateSequence"/> implementation must be mutable.
            </summary>
            <param name="dimension">
             The dimension of the coordinates in the sequence 
             (if the implemntation allows it to be user-specifiable, otherwise ignored)</param>
            <returns></returns>
        </member>
        <member name="P:GeoAPI.Coordinates.ICoordinateSequenceFactory.PrecisionModel">
            <summary>
             Gets the <see cref="T:GeoAPI.Coordinates.IPrecisionModel"/> of the coordinate sequence.
            </summary>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/> based on the given array; 
            whether or not the array is copied is implementation-dependent.
            </summary>
            <param name="coordinates">
            An enumeration of coordinates, which may not be null nor contain null elements.
            </param>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory`1.Create(GeoAPI.Coordinates.ICoordinateSequence{`0})">
            <summary>
            Creates a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/> which is a copy
            of the given <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>.
            This method must handle null arguments by creating an empty sequence.
            </summary>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequenceFactory`1.Create(System.Int32,GeoAPI.Coordinates.CoordinateDimensions)">
            <summary>
            Creates a <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/> of the specified size and dimension.
            For this to be useful, the <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/> implementation must be mutable.
            </summary>
            <param name="dimension">the dimension of the coordinates in the sequence 
            (if user-specifiable, otherwise ignored)</param>
        </member>
        <member name="T:GeoAPI.DataStructures.Caster">
            <summary>
            Casts
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.Caster.Upcast``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="TT"></typeparam>
            <typeparam name="TU"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Caster.Downcast``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            
            </summary>
            <typeparam name="TT"></typeparam>
            <typeparam name="TU"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Caster.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts all items in an <see cref="T:System.Collections.IEnumerable"/> to a specific type. If an item is not of type T, <value>null</value> is returned.
            </summary>
            <typeparam name="T">the Type to cast to</typeparam>
            <param name="enumerable"></param>
            <returns>a casted enumerable</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Caster.CastNoNulls``1(System.Collections.IEnumerable)">
            <summary>
            Casts all items in an <see cref="T:System.Collections.IEnumerable"/> to a specific type. If an item is not of type T, it is ignored.
            </summary>
            <typeparam name="T">the Type to cast to</typeparam>
            <param name="enumerable"></param>
            <returns>a casted enumerable</returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ProjectionParameter">
            <summary>
            A named projection parameter value.
            </summary>
            <remarks>
            The linear units of parameters' values match the linear units of the containing 
            projected coordinate system. The angular units of parameter values match the 
            angular units of the geographic coordinate system that the projected coordinate 
            system is based on. (Notice that this is different from <see cref="T:GeoAPI.CoordinateSystems.Parameter"/>,
            where the units are always meters and degrees.)
            </remarks>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Parameter">
            <summary>
            A named parameter value.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Parameter.#ctor(System.String,System.Double)">
            <summary>
            Creates an instance of a parameter
            </summary>
            <remarks>Units are always either meters or degrees.</remarks>
            <param name="name">Name of parameter.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Parameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Parameter.Value">
            <summary>
            Gets the parameter value.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ProjectionParameter.#ctor(System.String,System.Double)">
            <summary>
            Initializes an instance of a ProjectionParameter
            </summary>
            <param name="name">Name of parameter</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ProjectionParameter.Wkt">
            <summary>
            Returns the Well-Known Text for this object
            as defined in the simple features specification.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ProjectionParameter.Xml">
            <summary>
            Gets an XML representation of this object.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.AxisOrientation">
            <summary>
            Orientation of axis.
            </summary>
            <remarks>
            Some coordinate systems use non-standard orientations. 
            For example, the first axis in South African grids usually points West, 
            instead of East. This information is obviously relevant for algorithms
            converting South African grid coordinates into Lat/Long.
            </remarks>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.Other">
            <summary>
            Unknown or unspecified axis orientation. 
            This can be used for local or fitted coordinate systems.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.North">
            <summary>
            Increasing ordinates values go North. 
            This is usually used for Grid Y coordinates and Latitude.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.South">
            <summary>
            Increasing ordinates values go South. 
            This is rarely used.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.East">
            <summary>
            Increasing ordinates values go East. 
            This is rarely used.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.West">
            <summary>
            Increasing ordinates values go West. 
            This is usually used for Grid X coordinates and Longitude.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.Up">
            <summary>
            Increasing ordinates values go up. 
            This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.AxisOrientation.Down">
            <summary>
            Increasing ordinates values go down. 
            This is used for vertical coordinate systems.
            </summary>
        </member>
        <member name="T:GeoAPI.Geometries.IPolygonal">
            Identifies {@link Geometry} subclasses which
            are 2-dimensional 
            and have components which have {@link Lineal} boundaries. 
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1">
            <summary>
            Transforms muti-dimensional coordinate points.
            </summary>
            <remarks>
            If a client application wishes to query the source and target coordinate 
            systems of a transformation, then it should keep hold of the 
            <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation`1"/> interface, 
            and use the contained math transform object whenever it wishes to 
            perform a transform.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.Derivative(`0)">
            <summary>
            Gets the derivative of this transform at a point.
            </summary>
            <remarks>
            <para>
            If the transform does not have a well-defined derivative at the point, then 
            this function should fail in the usual way for the DCP. The derivative is 
            the matrix of the non-translating portion of the approximate affine map 
            at the point. 
            </para>
            <para>
            The matrix will have dimensions corresponding to the source and target 
            coordinate systems. If the input dimension is M, and the output dimension 
            is N, then the matrix will have size [M][N]. The elements of the matrix 
            {elt[n][m] : n=0..(N-1)} form a vector in the output space which is 
            parallel to the displacement caused by a small change in the m'th ordinate 
            in the input space.
            </para>
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.GetCodomainConvexHull(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets transformed convex hull.
            </summary>
            <remarks>
            <para>
            The supplied ordinates are interpreted as a sequence of points, 
            which generates a convex hull in the source space. The returned sequence 
            of ordinates represents a convex hull in the output space. The number of 
            output points will often be different from the number of input 
            points. Each of the input points should be inside the valid domain 
            (this can be checked by testing the points' domain flags individually). 
            However, the convex hull of the input points may go outside the valid 
            domain. The returned convex hull should contain the transformed image
            of the intersection of the source convex hull and the source domain.
            </para>
            <para>A convex hull is a shape in a coordinate system, where if two 
            positions A and B are inside the shape, then all positions in the straight 
            line between A and B are also inside the shape. So in 3D a cube and a sphere 
            are both convex hulls. Other less obvious examples of convex hulls are 
            straight lines, and single points. (A single point is a convex hull, 
            because the positions A and B must both be the same - i.e. the point itself. 
            So the straight line between A and B has zero length.)
            </para>
            <para>
            Some examples of shapes that are NOT convex hulls are donuts, 
            and horseshoes.
            </para>
            </remarks>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.GetDomainFlags(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets flags classifying domain points within a convex hull.
            </summary>
            <remarks>
            The supplied ordinates are interpreted as a sequence of points, which 
            generates a convex hull in the source space. Conceptually, each of the 
            (usually infinite) points inside the convex hull is then tested against
            the source domain. The flags of all these tests are then combined. In 
            practice, implementations of different transforms will use different 
            short-cuts to avoid doing an infinite number of tests.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.Transform(`0)">
            <summary>
            Transforms a coordinate point. 
            The passed parameter point should not be modified.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.Transform(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.Transform(GeoAPI.Coordinates.ICoordinateSequence{`0})">
            <summary>
            Transforms a list of coordinate point ordinal values.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1.Inverse">
            <summary>
            Creates the inverse transform of this object.
            </summary>
            <remarks>
            This method may fail if the transform is not one to one. 
            However, all cartographic projections should succeed.
            </remarks>
        </member>
        <member name="T:GeoAPI.Coordinates.Ordinates">
            <summary>
            Standard ordinate index values.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.X">
            <summary>
            X Ordinate = 0.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.Y">
            <summary>
            Y Ordinate = 1.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.Z">
            <summary>
            Z Ordinate = 2.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.W">
            <summary>
            W Ordinate = 3.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.M">
            <summary>
            M Ordinate = 4.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.Lon">
            <summary>
            Longitude Ordinate = 0.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Ordinates.Lat">
            <summary>
            Latitude Ordinate = 1.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IHorizontalDatum">
            <summary>
            Procedure used to measure positions on the surface of the Earth.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IDatum">
            <summary>
            A set of quantities from which other quantities are calculated.
            </summary>
            <remarks>
            For the OGC abstract model, it can be defined as a set of real points on the earth 
            that have coordinates. EG. A datum can be thought of as a set of parameters 
            defining completely the origin and orientation of a coordinate system with respect 
            to the earth. A textual description and/or a set of parameters describing the 
            relationship of a coordinate system to some predefined physical locations (such 
            as center of mass) and physical directions (such as axis of spin). The definition 
            of the datum may also include the temporal behavior (such as the rate of change of
            the orientation of the coordinate axes).
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IDatum.DatumType">
            <summary>
            Gets or sets the type of the datum as an enumerated code.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IHorizontalDatum.Ellipsoid">
            <summary>
            Gets or sets the ellipsoid of the datum.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IHorizontalDatum.Wgs84Parameters">
            <summary>
            Gets preferred parameters for a Bursa Wolf transformation into WGS84. 
            The 7 returned values correspond to (dx, dy, dz) in meters, (ex, ey, ez) 
            in arc-seconds, and scaling in parts-per-million.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IGeodeticSpatialReference`1">
            <summary>
            The IGeodeticSpatialReference interface defines a root interface for all types of geodetic
            spatial references, it is a subclass of ICoordinateSystem.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ICoordinateSystem`1">
            <summary>
            Base interface for all coordinate systems.
            </summary>
            <remarks>
            <para>
            A coordinate system is a mathematical space, where the elements of the space are called
            positions. Each position is described by an ordered set of numerical values. 
            The number of elements in the ordered set of values describing a position corresponds 
            to the dimension of the coordinate system. So in a 2D coordinate system each position is 
            described by a list containing 2 values.
            </para>
            <para>
            However, in a coordinate system, not all ordered sets of numbers correspond to a position - 
            some lists may be outside the domain of the coordinate system. For example, in a 2D Lat / Lon
            coordinate system, the list (91, 91) does not correspond to a position, since the 2D Lat / Lon
            range is bounded by the value 90 (at the poles).</para>
            <para>
            Some coordinate systems also have a mapping from the mathematical space into locations
            in the real world. So in a Lat / Lon coordinate system, the mathematical position (lat, lon) 
            corresponds to a location on the surface of the Earth. This mapping from the mathematical 
            space into real-world locations is called a Datum.
            </para>
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICoordinateSystem`1.DefaultEnvelope">
            <summary>
            Gets default envelope of coordinate system.
            </summary>
            <remarks>
            Gets default envelope of coordinate system. Coordinate systems 
            which are bounded should return the minimum bounding box of their 
            domain. Unbounded coordinate systems should return a box which is 
            as large as is likely to be used. For example, a (lon, lat) 
            geographic coordinate system in degrees should return a box from 
            (-180, -90) to (180, 90), and a geocentric coordinate system could 
            return a box from (-r, -r, -r) to (+r, +r, +r) where r is the 
            approximate radius of the Earth.
            </remarks>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem`1">
            <summary>
            A coordinate system which sits inside another coordinate system. The fitted 
            coordinate system can be rotated and shifted, or use any other math transform
            to inject itself into the base coordinate system.
            </summary>
            <remarks>
            The dimension of this fitted coordinate system is determined by the source 
            dimension of the math transform. The transform should be one-to-one within 
            this coordinate system's domain, and the base coordinate system dimension 
            must be at least as big as the dimension of this coordinate system.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.IFittedCoordinateSystem.ToBase">
            <summary>
            Gets Well-Known Text of a math transform to the base coordinate system. 
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IFittedCoordinateSystem.BaseCoordinateSystem">
            <summary>
            Gets underlying coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IFittedCoordinateSystem`1.BaseCoordinateSystem">
            <summary>
            Gets underlying coordinate system.
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.Enumerable.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.ICollection`1"/> 
            but does not accumulate the result.
            </summary>
        </member>
        <member name="T:GeoAPI.Coordinates.Tolerance">
            <summary>
            Represents a tolerance used in comparing <see cref="T:System.Single"/> 
            and <see cref="T:System.Double"/> floating point values.
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Tolerance.Default">
            <summary>
            The default tolerance: 0.000000001 (1E-9).
            </summary>
        </member>
        <member name="F:GeoAPI.Coordinates.Tolerance.Zero">
            <summary>
            A tolerance of zero.
            </summary>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.RegisterTolerance``1(System.Nullable{GeoAPI.Coordinates.Tolerance})">
            <summary>
            Registers a tolerance to be used for a specific type.
            </summary>
            <typeparam name="TValue">
            The type to register a tolerance for.
            </typeparam>
            <param name="tolerance">The tolerance to register.</param>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.UnregisterTolerance``1">
            <summary>
            Unregisters the tolerance value for a specific type.
            </summary>
            <typeparam name="TValue">
            The type to unregister a tolerance for.
            </typeparam>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Equal``1(System.Double,System.Double)">
            <summary>
            Compares two values for equality, using <typeparamref name="TValue"/>
            to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:GeoAPI.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the values are equal within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:GeoAPI.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Greater``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is greater
            than the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:GeoAPI.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is greater than the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:GeoAPI.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.GreaterOrEqual``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is greater
            than or equal to the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:GeoAPI.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is greater than or equal to the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:GeoAPI.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Less``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is less
            than the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:GeoAPI.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is less than the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:GeoAPI.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.LessOrEqual``1(System.Double,System.Double)">
            <summary>
            Compares if the <paramref name="leftHand">left hand</paramref> parameter is less
            than or equal to the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:GeoAPI.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            True if the left hand parameter is less than or equal to the right hand parameter 
            within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:GeoAPI.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered; false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Compare``1(System.Double,System.Double)">
            <summary>
            Compares the <paramref name="leftHand">left hand</paramref> parameter 
            to the <paramref name="rightHand">right hand</paramref> parameter, using 
            <typeparamref name="TValue"/> to lookup the tolerance registered for that type.
            </summary>
            <typeparam name="TValue">The type which may have a <see cref="T:GeoAPI.Coordinates.Tolerance"/> value registered.</typeparam>
            <param name="leftHand">The left hand value in the comparison.</param>
            <param name="rightHand">The right hand value in the comparison.</param>
            <returns>
            0 if the parameters differ within the tolerance registered for <typeparamref name="TValue"/>
            or the <see cref="P:GeoAPI.Coordinates.Tolerance.Global"/> tolerance if the type isn't registered;
            1 if <paramref name="leftHand"/> is greater (right hand is less) within the tolerance;
            -1 if <paramref name="rightHand"/> is greater (left hand is less) within the tolerance.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.#ctor(System.Double)">
            <summary>
            Initializes a new <see cref="T:GeoAPI.Coordinates.Tolerance"/> with the value <paramref name="value"/>.
            </summary>
            <param name="value">The value of the tolerance.</param>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Equal(System.Double,System.Double)">
            <summary>
            Compares if the left value and right value are equal using the 
            <see cref="P:GeoAPI.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is equal to <paramref name="rightHand"/> 
            (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Greater(System.Double,System.Double)">
            <summary>
            Compares if the left value is greater than using the 
            <see cref="P:GeoAPI.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is greater than <paramref name="rightHand"/> 
            (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Compares if the left value is greater than or equal using the 
            <see cref="P:GeoAPI.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is greater than or equal to 
            <paramref name="rightHand"/> (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Less(System.Double,System.Double)">
            <summary>
            Compares if the left value is less than using the 
            <see cref="P:GeoAPI.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is less than <paramref name="rightHand"/> 
            (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.LessOrEqual(System.Double,System.Double)">
            <summary>
            Compares if the left value is less than or equal using the 
            <see cref="P:GeoAPI.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            True if <paramref name="leftHand"/> is less than or equal to 
            <paramref name="rightHand"/> (within the tolerance), false otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.Tolerance.Compare(System.Double,System.Double)">
            <summary>
            Compares two values using the <see cref="P:GeoAPI.Coordinates.Tolerance.Value">tolerance value</see>.
            </summary>
            <param name="leftHand">Left hand side of comparison.</param>
            <param name="rightHand">Right hand side of comparison.</param>
            <returns>
            0 if the parameters differ by the tolerance value or less, 
            1 if <paramref name="leftHand"/> is greater,
            -1 if <paramref name="rightHand"/> is greater.
            </returns>
        </member>
        <member name="P:GeoAPI.Coordinates.Tolerance.Global">
            <summary>
            The globally accessible tolerance. Used to change the tolerance computation
            for the entire AppDomain.
            </summary>
        </member>
        <member name="P:GeoAPI.Coordinates.Tolerance.Value">
            <summary>
            Gets the value of the tolerance.
            </summary>
        </member>
        <member name="T:GeoAPI.IO.WellKnownBinary.WkbByteOrder">
            <summary>
            Specifies the specific binary encoding 
            (NDR or XDR, Little Endian or Big Endian) 
            used for a geometry byte stream
            </summary>
        </member>
        <member name="F:GeoAPI.IO.WellKnownBinary.WkbByteOrder.Xdr">
            <summary>
            XDR (Big Endian) encoding of numeric types.
            </summary>
            <remarks>
            <para>
            The XDR representation of an Unsigned Integer is 
            Big Endian (most significant byte first).
            </para>
            <para>
            The XDR representation of a Double is 
            Big Endian (sign bit is first byte).
            </para>
            </remarks>
        </member>
        <member name="F:GeoAPI.IO.WellKnownBinary.WkbByteOrder.BigEndian">
            <summary>
            Big Endian (XDR) encoding of numeric types.
            </summary>
            <remarks>
            <para>
            For an Unsigned Integer, the most significant byte comes first.
            </para>
            <para>
            For a Double, the sign bit comes first.
            </para>
            </remarks>
        </member>
        <member name="F:GeoAPI.IO.WellKnownBinary.WkbByteOrder.Ndr">
            <summary>
            NDR (Little Endian) encoding of numeric types.
            </summary>
            <remarks>
            <para>
            The NDR representation of an Unsigned Integer is 
            Little Endian (least significant byte first).
            </para>
            <para>
            The NDR representation of a Double is 
            Little Endian (sign bit is in the last byte).
            </para>
            </remarks>
        </member>
        <member name="F:GeoAPI.IO.WellKnownBinary.WkbByteOrder.LittleEndian">
            <summary>
            Little Endian (NDR) encoding of numeric types.
            </summary>
            <remarks>
            <para>
            For an Unsigned Integer, the least significant byte comes first.
            </para>
            <para>
            For a Double, the sign bit is in the last byte.
            </para>
            </remarks>
        </member>
        <member name="T:GeoAPI.Geometries.Dimensions">
            <summary>
            Constants representing the dimensions of a point, a curve and a surface.
            Also, constants representing the dimensions of the empty point and
            non-empty geometries, and a wildcard dimension meaning "any dimension".
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Dimensions.Point">
            <summary>
            Dimension value of a point (0).
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Dimensions.Curve">
            <summary>
            Dimension value of a curve (1).
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Dimensions.Surface">
            <summary>
            Dimension value of a surface (2).
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Dimensions.False">
            <summary>
            Dimension value of a empty point (-1).
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Dimensions.True">
            <summary>
            Dimension value of non-empty geometries (= {Point,Curve,A}).
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Dimensions.DontCare">
            <summary>
            Dimension value for any dimension (= {False, True}).
            </summary>
        </member>
        <member name="T:GeoAPI.Geometries.DimensionTypeConverter">
            <summary>
            Converts between <see cref="T:GeoAPI.Geometries.Dimensions"/> values and character types which represent
            the dimensional intersection.
            </summary>
        </member>
        <member name="M:GeoAPI.Geometries.DimensionTypeConverter.ToDimensionSymbol(GeoAPI.Geometries.Dimensions)">
            <summary>
            Converts the dimension value to a dimension symbol,
            for example, <c>True =&gt; 'T'</c>
            </summary>
            <param name="dimensionValue">Number that can be stored in the <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>.
            Possible values are <c>True, False, DontCare, 0, 1, 2</c>.</param>
            <returns>Character for use in the String representation of an <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>.
            Possible values are <c>T, F, * , 0, 1, 2</c>.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.DimensionTypeConverter.ToDimensionValue(System.Char)">
            <summary>
            Converts the dimension symbol to a dimension value,
            for example, <c>'*' =&gt; DontCare</c>
            </summary>
            <param name="dimensionSymbol">Character for use in the String 
            representation of an <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>.
            Possible values are <c>T, F, * , 0, 1, 2</c>.</param>
            <returns>Number that can be stored in the <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>.
            Possible values are <c>True, False, DontCare, 0, 1, 2</c>.</returns>
        </member>
        <member name="T:GeoAPI.Diagnostics.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.String,System.Object)"/> -like form
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:GeoAPI.Diagnostics.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:GeoAPI.Diagnostics.AssertionConditionAttribute"/>
        </member>
        <member name="T:GeoAPI.Diagnostics.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:GeoAPI.Diagnostics.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:GeoAPI.Diagnostics.AssertionConditionType"/>
        </member>
        <member name="T:GeoAPI.Diagnostics.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:GeoAPI.Diagnostics.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:GeoAPI.Diagnostics.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:GeoAPI.Diagnostics.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:GeoAPI.Diagnostics.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <remarks>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code></remarks>
        </member>
        <member name="T:GeoAPI.DataStructures.ITuple">
            <summary>
            Represents an ordered collection of homogeneous items.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.ITuple.Rank">
            <summary>
            Gets the number of items in the tuple.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.ITuple.Item(System.Int32)">
            <summary>
            Gets the item at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The position of the item in the tuple.</param>
            <returns>The item at the given position in the tuple.</returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1">
            <summary>
            Represents a factory instance for building up complex 
            coordinate system instances from simpler instances or values.
            </summary>
            <remarks>
            <para>
            A <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1"/> allows applications 
            to make coordinate systems that  cannot be created by a 
            <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1"/>. 
            This factory is very flexible, whereas the authority factory is easier to use.
            </para>
            <para>
            A <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1"/> can be used 
            to make coordinate systems which are 'standard' or well documented by an 
            authority, and <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1"/> can be used 
            to make coordinate systems which are suited for a specific use, and not well 
            known outside a local geography.
            </para>
            <para>
            For example, the EPSG authority has codes for USA state plane coordinate systems 
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not 
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.
            </para>
            </remarks>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ICoordinateSystemFactory">
            <summary>
            Represents a factory instance for building up complex 
            coordinate system instances from simpler instances or values.
            </summary>
            <remarks>
            <para>
            A <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemFactory"/> allows applications 
            to make coordinate systems that  cannot be created by a 
            <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory"/>. 
            This factory is very flexible, whereas the authority factory is easier to use.
            </para>
            <para>
            A <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory"/> can be used 
            to make coordinate systems which are 'standard' or well documented by an 
            authority, and <see cref="T:GeoAPI.CoordinateSystems.ICoordinateSystemFactory"/> can be used 
            to make coordinate systems which are suited for a specific use, and not well 
            known outside a local geography.
            </para>
            <para>
            For example, the EPSG authority has codes for USA state plane coordinate systems 
            using the NAD83 datum, but these coordinate systems always use meters. EPSG does not 
            have codes for NAD83 state plane coordinate systems that use feet units. This factory
            lets an application create such a hybrid coordinate system.
            </para>
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateCompoundCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system.</param>
            <param name="tail">Tail coordinate system.</param>
            <returns>Compound coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateCompoundCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem,GeoAPI.CoordinateSystems.ICoordinateSystem,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system.</param>
            <param name="tail">Tail coordinate system.</param>
            <returns>Compound coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit,System.String)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> from radius values.
            </summary>
            <seealso cref="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit,System.String)"/>
            <param name="name">Name of ellipsoid.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> instance with the given parameters.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> from radius values.
            </summary>
            <seealso cref="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit,System.String)"/>
            <param name="name">Name of ellipsoid.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> instance with the given parameters.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFittedCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>
            The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg, lon_deg, height_feet) system can be rotated in the 
            (lat, lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.
            </remarks>
            <param name="name">Name of coordinate system.</param>
            <param name="baseCoordinateSystem">Base coordinate system.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem"/> instance.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFittedCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem,System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem"/>.
            </summary>
            <remarks>
            The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg, lon_deg, height_feet) system can be rotated in the 
            (lat, lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.
            </remarks>
            <param name="name">Name of coordinate system.</param>
            <param name="baseCoordinateSystem">Base coordinate system.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem"/> instance.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit,System.String)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <seealso cref="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(GeoAPI.CoordinateSystems.CommonEllipsoids)"/>
            <param name="name">Name of ellipsoid.</param>
            <param name="semiMajorAxis">Semi major-axis.</param>
            <param name="inverseFlattening">Inverse flattening.</param>
            <param name="linearUnit">Linear unit.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> instance with the given parameters.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFlattenedSphere(System.Double,System.Double,GeoAPI.CoordinateSystems.ILinearUnit,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> from an major radius, and inverse flattening.
            </summary>
            <seealso cref="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateEllipsoid(GeoAPI.CoordinateSystems.CommonEllipsoids)"/>
            <param name="name">Name of ellipsoid.</param>
            <param name="semiMajorAxis">Semi major-axis.</param>
            <param name="inverseFlattening">Inverse flattening.</param>
            <param name="linearUnit">Linear unit.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IEllipsoid"/> instance with the given parameters.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateGeographicCoordinateSystem(GeoAPI.Geometries.IExtents,GeoAPI.CoordinateSystems.IAngularUnit,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IPrimeMeridian,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem"/>, which 
            could be Lat / Lon or Lon / Lat.
            </summary>
            <param name="name">Name of geographical coordinate system.</param>
            <param name="angularUnit">Angular units.</param>
            <param name="datum">Horizontal datum.</param>
            <param name="primeMeridian">Prime meridian.</param>
            <param name="axis0">First axis.</param>
            <param name="axis1">Second axis.</param>
            <returns>Geographic coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateGeographicCoordinateSystem(GeoAPI.Geometries.IExtents,GeoAPI.CoordinateSystems.IAngularUnit,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IPrimeMeridian,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem"/>, which 
            could be Lat / Lon or Lon / Lat.
            </summary>
            <param name="name">Name of geographical coordinate system.</param>
            <param name="angularUnit">Angular units.</param>
            <param name="datum">Horizontal datum.</param>
            <param name="primeMeridian">Prime meridian.</param>
            <param name="axis0">First axis.</param>
            <param name="axis1">Second axis.</param>
            <returns>Geographic coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateHorizontalDatum(GeoAPI.CoordinateSystems.DatumType,GeoAPI.CoordinateSystems.IEllipsoid,GeoAPI.CoordinateSystems.Wgs84ConversionInfo,System.String)">
            <summary>
            Creates <see cref="T:GeoAPI.CoordinateSystems.IHorizontalDatum"/> from ellipsoid and Bursa-World 
            parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created 
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can 
            either specify a <see cref="T:GeoAPI.CoordinateSystems.DatumType"/> of <see cref="F:GeoAPI.CoordinateSystems.DatumType.HorizontalOther"/>, 
            or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid.</param>
            <param name="datumType">Type of datum.</param>
            <param name="ellipsoid">Ellipsoid.</param>
            <param name="toWgs84">Wgs84 conversion parameters.</param>
            <returns>Horizontal datum.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateHorizontalDatum(GeoAPI.CoordinateSystems.DatumType,GeoAPI.CoordinateSystems.IEllipsoid,GeoAPI.CoordinateSystems.Wgs84ConversionInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates <see cref="T:GeoAPI.CoordinateSystems.IHorizontalDatum"/> from ellipsoid and Bursa-World 
            parameters.
            </summary>
            <remarks>
            Since this method contains a set of Bursa-Wolf parameters, the created 
            datum will always have a relationship to WGS84. If you wish to create a
            horizontal datum that has no relationship with WGS84, then you can 
            either specify a <see cref="T:GeoAPI.CoordinateSystems.DatumType"/> of <see cref="F:GeoAPI.CoordinateSystems.DatumType.HorizontalOther"/>, 
            or create it via WKT.
            </remarks>
            <param name="name">Name of ellipsoid.</param>
            <param name="datumType">Type of datum.</param>
            <param name="ellipsoid">Ellipsoid.</param>
            <param name="toWgs84">Wgs84 conversion parameters.</param>
            <returns>Horizontal datum.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateLocalCoordinateSystem(GeoAPI.CoordinateSystems.ILocalDatum,GeoAPI.CoordinateSystems.IUnit,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalCoordinateSystem">local coordinate 
            system</see>.
            </summary>
            <remarks>
            The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system.</param>
            <param name="datum">Local datum.</param>
            <param name="unit">Units.</param>
            <param name="axes">Axis info.</param>
            <returns>Local coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateLocalCoordinateSystem(GeoAPI.CoordinateSystems.ILocalDatum,GeoAPI.CoordinateSystems.IUnit,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalCoordinateSystem">local coordinate 
            system</see>.
            </summary>
            <remarks>
            The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system.</param>
            <param name="datum">Local datum.</param>
            <param name="unit">Units.</param>
            <param name="axes">Axis info.</param>
            <returns>Local coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateLocalDatum(GeoAPI.CoordinateSystems.DatumType,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalDatum"/>.
            </summary>
            <param name="name">Name of datum.</param>
            <param name="datumType">Datum type.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.ILocalDatum"/> instance.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateLocalDatum(GeoAPI.CoordinateSystems.DatumType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalDatum"/>.
            </summary>
            <param name="name">Name of datum.</param>
            <param name="datumType">Datum type.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.ILocalDatum"/> instance.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreatePrimeMeridian(GeoAPI.CoordinateSystems.IAngularUnit,System.Double,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IPrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian.</param>
            <param name="angularUnit">Angular unit.</param>
            <param name="longitude">Longitude.</param>
            <returns>Prime meridian.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreatePrimeMeridian(GeoAPI.CoordinateSystems.IAngularUnit,System.Double,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IPrimeMeridian"/>, relative to Greenwich.
            </summary>
            <param name="name">Name of prime meridian.</param>
            <param name="angularUnit">Angular unit.</param>
            <param name="longitude">Longitude.</param>
            <returns>Prime meridian.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateProjectedCoordinateSystem(GeoAPI.CoordinateSystems.IGeographicCoordinateSystem,GeoAPI.CoordinateSystems.IProjection,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem"/> using a 
            projection object.
            </summary>
            <param name="name">Name of projected coordinate system.</param>
            <param name="gcs">Geographic coordinate system.</param>
            <param name="projection">Projection.</param>
            <param name="linearUnit">Linear unit.</param>
            <param name="axis0">Primary axis.</param>
            <param name="axis1">Secondary axis.</param>
            <returns>Projected coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateProjectedCoordinateSystem(GeoAPI.CoordinateSystems.IGeographicCoordinateSystem,GeoAPI.CoordinateSystems.IProjection,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem"/> using a 
            projection object.
            </summary>
            <param name="name">Name of projected coordinate system.</param>
            <param name="gcs">Geographic coordinate system.</param>
            <param name="projection">Projection.</param>
            <param name="linearUnit">Linear unit.</param>
            <param name="axis0">Primary axis.</param>
            <param name="axis1">Secondary axis.</param>
            <returns>Projected coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateProjection(System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IProjection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateProjection(System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.ProjectionParameter},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IProjection"/>.
            </summary>
            <param name="name">Name of projection</param>
            <param name="wktProjectionClass">Projection class</param>
            <param name="parameters">Projection parameters</param>
            <returns>Projection</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalCoordinateSystem(GeoAPI.CoordinateSystems.IVerticalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem"/> from 
            a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum">datum</see> and 
            <see cref="T:GeoAPI.CoordinateSystems.ILinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system.</param>
            <param name="datum">Vertical datum.</param>
            <param name="verticalUnit">Unit.</param>
            <param name="axis">Axis info.</param>
            <returns>Vertical coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalCoordinateSystem(GeoAPI.CoordinateSystems.IVerticalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem"/> from 
            a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum">datum</see> and 
            <see cref="T:GeoAPI.CoordinateSystems.ILinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system.</param>
            <param name="datum">Vertical datum.</param>
            <param name="verticalUnit">Unit.</param>
            <param name="axis">Axis info.</param>
            <returns>Vertical coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalDatum(GeoAPI.CoordinateSystems.DatumType,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum.</param>
            <param name="datumType">Type of datum.</param>
            <returns>Vertical datum.</returns>	
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateVerticalDatum(GeoAPI.CoordinateSystems.DatumType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum"/> from an enumerated type value.
            </summary>
            <param name="name">Name of datum.</param>
            <param name="datumType">Type of datum.</param>
            <returns>Vertical datum.</returns>	
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML String.
            </summary>
            <param name="xml">XML representation for the spatial reference.</param>
            <returns>The resulting spatial reference object.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its Well-Known Text representation.
            The output object may be either a 
            <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem"/> or
            a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem"/>.
            </summary>
            <param name="wkt">
            The Well-Known Text representation for the spatial reference.
            </param>
            <returns>The resulting spatial reference object.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateCompoundCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem{`0},GeoAPI.CoordinateSystems.ICoordinateSystem{`0},System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem`1"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system.</param>
            <param name="tail">Tail coordinate system.</param>
            <returns>Compound coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateCompoundCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem{`0},GeoAPI.CoordinateSystems.ICoordinateSystem{`0},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem`1"/>.
            </summary>
            <param name="name">Name of compound coordinate system.</param>
            <param name="head">Head coordinate system.</param>
            <param name="tail">Tail coordinate system.</param>
            <returns>Compound coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateFittedCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem{`0},System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem`1"/>.
            </summary>
            <remarks>
            The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg, lon_deg, height_feet) system can be rotated in the 
            (lat, lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.
            </remarks>
            <param name="name">Name of coordinate system.</param>
            <param name="baseCoordinateSystem">Base coordinate system.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem`1"/> instance.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateFittedCoordinateSystem(GeoAPI.CoordinateSystems.ICoordinateSystem{`0},System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem`1"/>.
            </summary>
            <remarks>
            The units of the axes in the fitted coordinate system will be 
            inferred from the units of the base coordinate system. If the affine map
            performs a rotation, then any mixed axes must have identical units. For
            example, a (lat_deg, lon_deg, height_feet) system can be rotated in the 
            (lat, lon) plane, since both affected axes are in degrees. But you 
            should not rotate this coordinate system in any other plane.
            </remarks>
            <param name="name">Name of coordinate system.</param>
            <param name="baseCoordinateSystem">Base coordinate system.</param>
            <returns>An <see cref="T:GeoAPI.CoordinateSystems.IFittedCoordinateSystem`1"/> instance.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateFromXml(System.String)">
            <summary>
            Creates a coordinate system object from an XML String.
            </summary>
            <param name="xml">XML representation for the spatial reference.</param>
            <returns>The resulting spatial reference object.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateFromWkt(System.String)">
            <summary>
            Creates a spatial reference object given its Well-Known Text representation.
            The output object may be either a 
            <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem`1"/> or
            a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem`1"/>.
            </summary>
            <param name="wkt">
            The Well-Known Text representation for the spatial reference.
            </param>
            <returns>The resulting spatial reference object.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateGeographicCoordinateSystem(GeoAPI.Geometries.IExtents{`0},GeoAPI.CoordinateSystems.IAngularUnit,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IPrimeMeridian,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem`1"/>, which 
            could be Lat / Lon or Lon / Lat.
            </summary>
            <param name="name">Name of geographical coordinate system.</param>
            <param name="angularUnit">Angular units.</param>
            <param name="datum">Horizontal datum.</param>
            <param name="primeMeridian">Prime meridian.</param>
            <param name="axis0">First axis.</param>
            <param name="axis1">Second axis.</param>
            <returns>Geographic coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateGeographicCoordinateSystem(GeoAPI.Geometries.IExtents{`0},GeoAPI.CoordinateSystems.IAngularUnit,GeoAPI.CoordinateSystems.IHorizontalDatum,GeoAPI.CoordinateSystems.IPrimeMeridian,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem`1"/>, which 
            could be Lat / Lon or Lon / Lat.
            </summary>
            <param name="name">Name of geographical coordinate system.</param>
            <param name="angularUnit">Angular units.</param>
            <param name="datum">Horizontal datum.</param>
            <param name="primeMeridian">Prime meridian.</param>
            <param name="axis0">First axis.</param>
            <param name="axis1">Second axis.</param>
            <returns>Geographic coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateLocalCoordinateSystem(GeoAPI.CoordinateSystems.ILocalDatum,GeoAPI.CoordinateSystems.IUnit,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalCoordinateSystem`1">local coordinate 
            system</see>.
            </summary>
            <remarks>
            The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system.</param>
            <param name="datum">Local datum.</param>
            <param name="unit">Units.</param>
            <param name="axes">Axis info.</param>
            <returns>Local coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateLocalCoordinateSystem(GeoAPI.CoordinateSystems.ILocalDatum,GeoAPI.CoordinateSystems.IUnit,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.IAxisInfo},System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.ILocalCoordinateSystem`1">local coordinate 
            system</see>.
            </summary>
            <remarks>
            The dimension of the local coordinate system is determined by the size of 
            the axis array. All the axes will have the same units. If you want to make 
            a coordinate system with mixed units, then you can make a compound 
            coordinate system from different local coordinate systems.
            </remarks>
            <param name="name">Name of local coordinate system.</param>
            <param name="datum">Local datum.</param>
            <param name="unit">Units.</param>
            <param name="axes">Axis info.</param>
            <returns>Local coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateProjectedCoordinateSystem(GeoAPI.CoordinateSystems.IGeographicCoordinateSystem{`0},GeoAPI.CoordinateSystems.IProjection,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem`1"/> using a 
            projection object.
            </summary>
            <param name="name">Name of projected coordinate system.</param>
            <param name="gcs">Geographic coordinate system.</param>
            <param name="projection">Projection.</param>
            <param name="linearUnit">Linear unit.</param>
            <param name="axis0">Primary axis.</param>
            <param name="axis1">Secondary axis.</param>
            <returns>Projected coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateProjectedCoordinateSystem(GeoAPI.CoordinateSystems.IGeographicCoordinateSystem{`0},GeoAPI.CoordinateSystems.IProjection,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,GeoAPI.CoordinateSystems.IAxisInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem`1"/> using a 
            projection object.
            </summary>
            <param name="name">Name of projected coordinate system.</param>
            <param name="gcs">Geographic coordinate system.</param>
            <param name="projection">Projection.</param>
            <param name="linearUnit">Linear unit.</param>
            <param name="axis0">Primary axis.</param>
            <param name="axis1">Secondary axis.</param>
            <returns>Projected coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateVerticalCoordinateSystem(GeoAPI.CoordinateSystems.IVerticalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem`1"/> from 
            a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum">datum</see> and 
            <see cref="T:GeoAPI.CoordinateSystems.ILinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system.</param>
            <param name="datum">Vertical datum.</param>
            <param name="verticalUnit">Unit.</param>
            <param name="axis">Axis info.</param>
            <returns>Vertical coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateVerticalCoordinateSystem(GeoAPI.CoordinateSystems.IVerticalDatum,GeoAPI.CoordinateSystems.ILinearUnit,GeoAPI.CoordinateSystems.IAxisInfo,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem`1"/> from 
            a <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum">datum</see> and 
            <see cref="T:GeoAPI.CoordinateSystems.ILinearUnit">linear units</see>.
            </summary>
            <param name="name">Name of vertical coordinate system.</param>
            <param name="datum">Vertical datum.</param>
            <param name="verticalUnit">Unit.</param>
            <param name="axis">Axis info.</param>
            <returns>Vertical coordinate system.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateWgs84GeocentricCoordinateSystem">
            <summary>
            Creates a geocentric coordinate system based on the WGS84 ellipsoid, 
            suitable for GPS measurements.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemFactory`1.CreateWgs84GeographicCoordinateSystem">
            <summary>
            Creates a geographic coordinate system based on the WGS84 ellipsoid, 
            suitable for GPS measurements.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IAngularUnit">
            <summary>
            The IAngularUnit interface defines methods on angular units.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IUnit">
            <summary>
            The IUnit interface abstracts different kinds of units, it has no methods.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IAngularUnit.RadiansPerUnit">
            <summary>
            Gets or sets the number of radians per angular unit.
            </summary>
        </member>
        <member name="T:GeoAPI.Operations.Buffer.BufferStyle">
            <summary>
            Buffer style.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferStyle.Round">
            <summary> 
            Specifies a round line buffer end cap endCapStyle (Default).
            </summary>/
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferStyle.Butt">
            <summary> 
            Specifies a butt (or flat) line buffer end cap endCapStyle.
            </summary>
        </member>
        <member name="F:GeoAPI.Operations.Buffer.BufferStyle.Square">
            <summary>
            Specifies a square line buffer end cap endCapStyle.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem`1">
            <summary>
            The IGeographicCoordinateSystem interface is a subclass of IGeodeticSpatialReference and
            defines the standard information stored with geographic coordinate system objects.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IHorizontalCoordinateSystem.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem.GetWgs84ConversionInfo(System.Int32)">
            <summary>
            Gets details on a conversion to WGS84.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem.AngularUnit">
            <summary>
            Gets or sets the angular units of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem.PrimeMeridian">
            <summary>
            Gets or sets the prime meridian of the geographic coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IGeographicCoordinateSystem.ConversionToWgs84Count">
            <summary>
            Gets the number of available conversions to WGS84 coordinates.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IHorizontalCoordinateSystem`1">
            <summary>
            A 2D coordinate system suitable for positions on the Earth's surface.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1">
            <summary>
            Creates spatial reference objects using codes.
            </summary>
            <remarks>
            The codes are maintained by an external authority. 
            A commonly used authority is EPSG.
            </remarks>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory">
            <summary>
            Creates spatial reference objects using codes.
            </summary>
            <remarks>
            The codes are maintained by an external authority. 
            A commonly used authority is EPSG.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateProjectedCoordinateSystem(System.Int64)">
            <summary>
            Returns a projected coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The projected coordinate system object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateGeographicCoordinateSystem(System.Int64)">
            <summary>
            Returns a geographic coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The geographic coordinate system object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateHorizontalDatum(System.Int64)">
            <summary>
            Returns a horizontal datum object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The horizontal datum object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateEllipsoid(System.Int64)">
            <summary>
            Returns an ellipsoid object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The ellipsoid object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreatePrimeMeridian(System.Int64)">
            <summary>
            Returns a prime meridian object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The prime meridian object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateLinearUnit(System.Int64)">
            <summary>
            Returns a linear unit object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The linear unit object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateAngularUnit(System.Int64)">
            <summary>
            Returns an <see cref="T:GeoAPI.CoordinateSystems.IAngularUnit"/> instance corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The angular unit object for the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateVerticalDatum(System.Int64)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IVerticalDatum"/> instance from a code.
            </summary>
            <param name="code">Authority code.</param>
            <returns>Vertical datum for the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateVerticalCoordinateSystem(System.Int64)">
            <summary>
            Create an <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem`1"/> instace from a code.
            </summary>
            <param name="code">Authority code.</param>
            <returns>The vertical coordinate system for the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateCompoundCoordinateSystem(System.Int64)">
            <summary>
            Creates a 3D coordinate system from a code.
            </summary>
            <param name="code">Authority code.</param>
            <returns>Compound coordinate system for the given code</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.CreateHorizontalCoordinateSystem(System.Int64)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IHorizontalCoordinateSystem`1"/> instance from a code.
            The horizontal coordinate system could be geographic or projected.
            </summary>
            <param name="code">Authority code.</param>
            <returns>Horizontal coordinate system for the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.GeoidFromWktName(System.String)">
            <summary>
            Gets the Geoid code from a WKT name.
            </summary>
            <remarks>
            In the OGC definition of WKT horizontal datums, the geoid is referenced 
            by a quoted String, which is used as a key value. This method converts 
            the key value String into a code recognized by this authority.
            </remarks>
            <param name="wkt"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.WktGeoidName(System.String)">
            <summary>
            Gets the WKT name of a Geoid.
            </summary>
            <remarks>
            In the OGC definition of WKT horizontal datums, the geoid is referenced by 
            a quoted String, which is used as a key value. This method gets the OGC WKT 
            key value from a geoid code.
            </remarks>
            <param name="geoid"></param>
            <returns></returns>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.Authority">
            <summary>
            Returns the authority name for this factory (e.g., "EPSG" or "POSC").
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory.DescriptionText">
            <summary>
            Gets a description of the object corresponding to a code.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1.CreateProjectedCoordinateSystem(System.Int64)">
            <summary>
            Returns a projected coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The projected coordinate system object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1.CreateGeographicCoordinateSystem(System.Int64)">
            <summary>
            Returns a geographic coordinate system object corresponding to the given code.
            </summary>
            <param name="code">The identification code.</param>
            <returns>The geographic coordinate system object with the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1.CreateVerticalCoordinateSystem(System.Int64)">
            <summary>
            Create an <see cref="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem`1"/> instace from a code.
            </summary>
            <param name="code">Authority code.</param>
            <returns>The vertical coordinate system for the given code.</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1.CreateCompoundCoordinateSystem(System.Int64)">
            <summary>
            Creates a 3D coordinate system from a code.
            </summary>
            <param name="code">Authority code.</param>
            <returns>Compound coordinate system for the given code</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.ICoordinateSystemAuthorityFactory`1.CreateHorizontalCoordinateSystem(System.Int64)">
            <summary>
            Creates an <see cref="T:GeoAPI.CoordinateSystems.IHorizontalCoordinateSystem`1"/> instance from a code.
            The horizontal coordinate system could be geographic or projected.
            </summary>
            <param name="code">Authority code.</param>
            <returns>Horizontal coordinate system for the given code.</returns>
        </member>
        <member name="T:GeoAPI.DataStructures.Pair`1">
            <summary>
            Represents a 2-tuple.
            </summary>
            <typeparam name="TItem">The type of item in the tuple.</typeparam>
        </member>
        <member name="T:GeoAPI.DataStructures.ITuple`1">
            <summary>
            Represents a strongly-typed ordered collection of homogeneous items.
            </summary>
            <typeparam name="TItem">The type of the items in the tuple.</typeparam>
        </member>
        <member name="P:GeoAPI.DataStructures.ITuple`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The position of the item in the tuple.</param>
            <returns>The item at the given position in the tuple.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.Pair`1.#ctor(`0,`0)">
            <summary>
            Creates a new <see cref="T:GeoAPI.DataStructures.Pair`1"/> with the given values.
            </summary>
            <param name="item1">The first item in the pair.</param>
            <param name="item2">The second item in the pair.</param>
        </member>
        <member name="P:GeoAPI.DataStructures.Pair`1.First">
            <summary>
            Gets the first item in the pair.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Pair`1.Second">
            <summary>
            Gets the second item in the pair.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IParameterInfo">
            <summary>
            The IParameterInfo interface provides an interface through which clients of a
            Projected Coordinate System or of a Projection can set the parameters of the
            projection.
            </summary>
            <remarks>
            <see cref="T:GeoAPI.CoordinateSystems.IParameterInfo"/> provides a generic interface for discovering the names and default
            values of parameters, and for setting and getting parameter values. Subclasses of
            this interface may provide projection specific parameter access methods.
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.IParameterInfo.DefaultParameters">
            <summary>
            Returns the default parameters for this projection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IParameterInfo.ParameterCount">
            <summary>
            Gets the number of parameters expected.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IParameterInfo.Parameters">
            <summary>
            Gets or sets the parameters set for this projection.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IParameterInfo.Item(System.String)">
            <summary>
            Gets the parameter by its name.
            </summary>
            <param name="name">The name of the parameter to access.</param>
            <returns>
            The parameter with the given <paramref name="name"/> or <see langword="null"/>
            if no Parameter with the name could be found.
            </returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem`1">
            <summary>
            A 3D coordinate system, with its origin at the center of the earth.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem.HorizontalDatum">
            <summary>
            Returns the HorizontalDatum. The horizontal datum is used to determine where
            the centre of the Earth is considered to be. All coordinate points will be 
            measured from the centre of the Earth, and not the surface.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem.LinearUnit">
            <summary>
            Gets the units used along all the axes.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IGeocentricCoordinateSystem.PrimeMeridian">
            <summary>
            Returns the PrimeMeridian.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.TransformType">
            <summary>
            Semantic type of transform used in coordinate transformation.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.TransformType.Other">
            <summary>
            Unknown or unspecified type of transform.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.TransformType.Conversion">
            <summary>
            Transform depends only on defined parameters. For example, a cartographic projection.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.TransformType.Transformation">
            <summary>
            Transform depends only on empirically derived parameters. For example a datum transformation.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.TransformType.ConversionAndTransformation">
            <summary>
            Transform depends on both defined and empirical parameters.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.AreaOfUse">
            <summary>
            Human readable description of domain in source coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.AuthorityCode">
            <summary>
            Code used by authority to identify transformation. 
            <see langword="null"/> is used for no code.
            </summary>
            <remarks>
            The authority code is a <see cref="T:System.String"/> 
            defined by an authority to reference a particular spatial 
            reference object. For example, the European Survey Group (EPSG) 
            authority uses 32 bit integers to reference coordinate systems, 
            so all their code strings will consist of a few digits. 
            The EPSG code for WGS84 Lat/Lon is "4326".
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.Source">
            <summary>
            Source coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.Target">
            <summary>
            Target coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.Name">
            <summary>
            Name of transformation.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.Remarks">
            <summary>
            Gets the provider-supplied remarks.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation.TransformType">
            <summary>
            Semantic type of transform. For example, a datum 
            transformation or a coordinate conversion.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem`1">
            <summary>
            The IProjectedCoordinateSystem interface defines the standard information 
            stored with projected coordinate system objects.
            </summary>
            <remarks>
            A projected coordinate system is defined using a
            geographic coordinate system object and a projection object that defines the
            coordinate transformation from the geographic coordinate system to the projected
            coordinate systems. The instances of a single ProjectedCoordinateSystem COM class can
            be used to model different projected coordinate systems (e.g., UTM Zone 10, Albers)
            by associating the ProjectedCoordinateSystem instances with Projection instances
            belonging to different Projection COM classes (Transverse Mercator and Albers,
            respectively).
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem.GeographicCoordinateSystem">
            <summary>
            Gets or sets the geographic coordinate system associated with the projected
            coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem.LinearUnit">
            <summary>
            Gets or sets the linear (projected) units of the projected coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem.Projection">
            <summary>
            Gets or sets the projection for the projected coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjectedCoordinateSystem`1.GeographicCoordinateSystem">
            <summary>
            Gets or sets the geographic coordinate system associated with the projected
            coordinate system.
            </summary>
        </member>
        <member name="T:GeoAPI.DataStructures.ByteEncoder">
            <summary>
            Byte encoder class
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetBigEndian(System.Int32)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetBigEndian(System.UInt16)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetBigEndian(System.UInt32)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetBigEndian(System.Double)">
            <summary>
            Returns the value encoded in Big Endian (PPC, XDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Big-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetLittleEndian(System.Int32)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetLittleEndian(System.UInt32)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetLittleEndian(System.UInt16)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.GetLittleEndian(System.Double)">
            <summary>
            Returns the value encoded in Little Endian (x86, NDR) format.
            </summary>
            <param name="value">Value to encode.</param>
            <returns>Little-endian encoded value.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.SwapByteOrder(System.Int32)">
            <summary>
            Swaps the Byte order of an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.SwapByteOrder(System.UInt16)">
            <summary>
            Swaps the byte order of a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt16"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.SwapByteOrder(System.UInt32)">
            <summary>
            Swaps the byte order of a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"><see cref="T:System.UInt32"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.SwapByteOrder(System.Int64)">
            <summary>
            Swaps the byte order of a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> to swap the bytes of.</param>
            <returns>Byte order swapped <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:GeoAPI.DataStructures.ByteEncoder.SwapByteOrder(System.Double)">
            <summary>
            Swaps the byte order of a <see cref="T:System.Double"/> (double precision IEEE 754)
            </summary>
            <param name="value"><see cref="T:System.Double"/> to swap.</param>
            <returns>Byte order swapped <see cref="T:System.Double"/> value.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GeoAPI.Geometries.IntersectionMatrix" -->
        <member name="F:GeoAPI.Geometries.IntersectionMatrix._matrix">
            <summary>  
            Internal representation of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>.
            </summary>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.#ctor">
            <summary>  
            Creates an <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> with <see langword="null"/> location values.
            </summary>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.#ctor(System.String)">
            <summary>
            Creates an <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> with the given dimension
            symbols.
            </summary>
            <param name="elements">A string of nine dimension symbols in row major order.</param>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.#ctor(GeoAPI.Geometries.IntersectionMatrix)">
            <summary> 
            Creates an <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> with the same elements as
            <c>other</c>.
            </summary>
            <param name="other">An <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> to copy.</param>         
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Add(GeoAPI.Geometries.IntersectionMatrix)">
            <summary> 
            Adds one matrix to another.
            Addition is defined by taking the maximum dimension value of each position
            in the summand matrices.
            </summary>
            <param name="im">The matrix to add.</param>        
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Matches(GeoAPI.Geometries.Dimensions,System.Char)">
            <summary>  
            Returns true if the dimension value satisfies the dimension symbol.
            </summary>
            <param name="actualDimensionValue">
            A <see cref="T:GeoAPI.Geometries.Dimensions"/> value that can be stored in 
            the <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>. 
            </param>
            <param name="requiredDimensionSymbol">
            A character used in the String
            representation of an <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>. 
            Possible values are <c>'T', 'F', '*' , '0', '1', '2'</c>.
            </param>
            <returns>
            <see langword="true"/> if the dimension symbol encompasses the dimension value.        
            </returns>        
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Matches(System.String,System.String)">
            <summary>
            Returns true if each of the actual dimension symbols satisfies the
            corresponding required dimension symbol.
            </summary>
            <param name="actualDimensionSymbols">
            Nine dimension symbols to validate.
            Possible values are <c>'T', 'F', '*' , '0', '1', '2'</c>.
            </param>
            <param name="requiredDimensionSymbols">
            Nine dimension symbols to validate
            against. Possible values are <c>'T', 'F', '*' , '0', '1', '2'</c>.
            </param>
            <returns>
            <see langword="true" /> if each of the required dimension
            symbols encompass the corresponding actual dimension symbol.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Set(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Dimensions)">
            <summary>
            Changes the value of one of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> elements.
            </summary>
            <param name="row">
            The row of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>,
            indicating the interior, boundary or exterior of the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            </param>
            <param name="column">
            The column of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>,
            indicating the interior, boundary or exterior of the second <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            </param>
            <param name="dimensionValue">The new value of the element</param>        
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Set(System.String)">
            <summary>
            Changes the elements of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> to the
            dimension symbols in <c>dimensionSymbols</c>.
            </summary>
            <param name="dimensionSymbols">
            Nine dimension symbols to which to set this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>
            s elements. Possible values are <c>'T', 'F', '*' , '0', '1', '2'</c>.
            </param>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.SetAtLeast(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Dimensions)">
            <summary>
            Changes the specified element to <paramref name="minimumDimensionValue"/> 
            if the element is less.
            </summary>
            <param name="row">
            The row of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>, 
            indicating the interior, boundary or exterior of the first 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <param name="column">
            The column of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>, 
            indicating the interior, boundary or exterior of the second 
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <param name="minimumDimensionValue">
            The dimension value with which to compare the
            element. The order of dimension values from least to greatest is
            <see cref="F:GeoAPI.Geometries.Dimensions.True"/>, <see cref="F:GeoAPI.Geometries.Dimensions.False"/>, 
            <see cref="F:GeoAPI.Geometries.Dimensions.DontCare"/>, <see cref="F:GeoAPI.Geometries.Dimensions.Point"/>, 
            <see cref="F:GeoAPI.Geometries.Dimensions.Curve"/>, <see cref="F:GeoAPI.Geometries.Dimensions.Surface"/>.
            </param>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.SetAtLeastIfValid(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations,GeoAPI.Geometries.Dimensions)">
            <summary>
            <para>
            If <paramref name="row"/> >= 0 and <paramref name="column"/> >= 0, 
            changes the specified element to <paramref name="minimumDimensionValue"/>
            if the element is less.
            </para>
            <para>
            Does nothing if <paramref name="row"/> is smaller to 0 or 
            <paramref name="column"/> is smaller to 0.
            </para>
            </summary>
            <param name="row">The row of the matrix to compare.</param>
            <param name="column">The column of the matrix to compare.</param>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.SetAtLeast(System.String)">
            <summary>
            For each element in this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>, changes the
            element to the corresponding minimum dimension symbol if the element is
            less.
            </summary>
            <param name="minimumDimensionSymbols"> 
            Nine dimension symbols with which to
            compare the elements of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>. The
            order of dimension values from least to greatest is <c>Dontcare, True, False, 0, 1, 2</c>.
            </param>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.SetAll(GeoAPI.Geometries.Dimensions)">
            <summary>  
            Changes the elements of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> to <c>dimensionValue</c>.
            </summary>
            <param name="dimensionValue">
            The dimension value to which to set this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>
            s elements. Possible values <c>True, False, Dontcare, 0, 1, 2}</c>.
            </param>         
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Get(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            Returns the value of one of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>s
            elements.
            </summary>
            <param name="row">
            The row of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>, indicating
            the interior, boundary or exterior of the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <param name="column">
            The column of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>,
            indicating the interior, boundary or exterior of the second <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>The dimension value at the given matrix position.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsDisjoint">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is FF*FF****.
            </summary>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>'s related by
            this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> are disjoint.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsIntersects">
            <summary>
            Returns <see langword="true"/> if <c>isDisjoint</c> returns false.
            </summary>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>'s related by
            this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> intersect.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsTouches(GeoAPI.Geometries.Dimensions,GeoAPI.Geometries.Dimensions)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is
            FT*******, F**T***** or F***T****.
            </summary>
            <param name="lhs">The dimension of the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <param name="rhs">The dimension of the second <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s 
            related by this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> touch; Returns 
            <see langword="false"/> if both <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s 
            are points.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsCrosses(GeoAPI.Geometries.Dimensions,GeoAPI.Geometries.Dimensions)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is
             T*T****** (for a point and a curve, a point and an area or a line
            and an area) 0******** (for two curves).
            </summary>
            <param name="lhs">
            The dimension of the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <param name="rhs">
            The dimension of the second <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.
            </param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            s related by this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> cross. For this
            function to return <see langword="true"/>, the <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s must
            be a point and a curve; a point and a surface; two curves; or a curve
            and a surface.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsWithin">
            <summary>  
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is
            T*F**F***.
            </summary>
            <returns><see langword="true"/> if the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/> is within the second.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsContains">
            <summary> 
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is
            T*****FF*.
            </summary>
            <returns><see langword="true"/> if the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/> contains the second.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsCovers">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is <c>T*****FF*</c>
            or <c>*T****FF*</c> or <c>***T**FF*</c> or <c>****T*FF*</c>.
            </summary>
            <returns><see langword="true"/> if the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/> covers the second</returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsEquals(GeoAPI.Geometries.Dimensions,GeoAPI.Geometries.Dimensions)">
            <summary> 
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is T*F**FFF*.
            </summary>
            <param name="lhs">The dimension of the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <param name="rhs">The dimension of the second <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            s related by this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> are equal; the
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s must have the same dimension for this function
            to return <see langword="true"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.IsOverlaps(GeoAPI.Geometries.Dimensions,GeoAPI.Geometries.Dimensions)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> is
             T*T***T** (for two points or two surfaces)
             1*T***T** (for two curves).
            </summary>
            <param name="lhs">The dimension of the first <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <param name="rhs">The dimension of the second <see cref="T:GeoAPI.Geometries.IGeometry`1"/>.</param>
            <returns>
            <see langword="true"/> if the two <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            s related by this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> overlap. For this
            function to return <see langword="true"/>, the <see cref="T:GeoAPI.Geometries.IGeometry`1"/>s must
            be two points, two curves or two surfaces.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Matches(System.String)">
            <summary> 
            Returns whether the elements of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>
            satisfies the required dimension symbols.
            </summary>
            <param name="requiredDimensionSymbols"> 
            Nine dimension symbols with which to
            compare the elements of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>. Possible
            values are <c>{T, F, * , 0, 1, 2}</c>.
            </param>
            <returns>
            <see langword="true"/> if this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>
            matches the required dimension symbols.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.Transpose">
            <summary>  
            Transposes this IntersectionMatrix.
            </summary>
            <returns>This <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/> as a convenience.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.IntersectionMatrix.ToString">
            <summary>
            Returns a nine-character <see cref="T:System.String"/> representation of 
            this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>.
            </summary>
            <returns>
            The nine dimension symbols of this <see cref="T:GeoAPI.Geometries.IntersectionMatrix"/>
            in row-major order.
            </returns>
        </member>
        <member name="P:GeoAPI.Geometries.IntersectionMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:GeoAPI.Geometries.Dimensions"/> value at the given
            <paramref name="row"/> and <paramref name="column"/>.
            </summary>
            <param name="row">The row to retrieve.</param>
            <param name="column">The column to retrieve.</param>
            <returns>The <see cref="T:GeoAPI.Geometries.Dimensions"/> value at the given index.</returns>
        </member>
        <member name="P:GeoAPI.Geometries.IntersectionMatrix.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:GeoAPI.Geometries.Dimensions"/> value at the given index, which is ordered
            the same as an OGC SFS standared DE-9IM string.
            </summary>
            <param name="index">The index of the dimension result to retrieve.</param>
            <returns></returns>
        </member>
        <member name="P:GeoAPI.Geometries.IntersectionMatrix.Item(GeoAPI.Geometries.Locations,GeoAPI.Geometries.Locations)">
            <summary>
            See methods Get(Int32, Int32) and Set(Int32, Int32, Int32 value)
            </summary>         
        </member>
        <member name="T:GeoAPI.Geometries.IGeometryComponentFilter`1">
            <summary>
            <c>Geometry</c> classes support the concept of applying
            an <c>IGeometryComponentFilter</c> filter to the <c>Geometry</c>.
            The filter is applied to every component of the <c>Geometry</c>
            which is itself a <c>Geometry</c>.
            (For instance, all the LinearRings in Polygons are visited.)
            An <c>IGeometryComponentFilter</c> filter can either
            record information about the <c>Geometry</c>
            or change the <c>Geometry</c> in some way.
            <c>IGeometryComponentFilter</c> is an example of the Gang-of-Four Visitor pattern.
            </summary>    
        </member>
        <member name="M:GeoAPI.Geometries.IGeometryComponentFilter`1.Filter(GeoAPI.Geometries.IGeometry{`0})">
            <summary>
            Performs an operation with or on <c>geom</c>.
            </summary>
            <param name="geom">A <c>Geometry</c> to which the filter is applied.</param>
        </member>
        <member name="T:GeoAPI.DataStructures.YieldingSpinLock">
            <summary>
            A thread synchronization lock which tries to wait on the contended resource by 
            spinning the waiting thread in user-mode, but will yield execution of the waiting thread
            if the wait is too long (2500 cycles).
            </summary>
            <remarks>
            WARNING: This lock is not reentrant - calling <see cref="M:GeoAPI.DataStructures.YieldingSpinLock.Enter"/> twice without calling <see cref="M:GeoAPI.DataStructures.YieldingSpinLock.Exit"/>
            in-between on the same thread will deadlock the thread.
            </remarks>
        </member>
        <member name="M:GeoAPI.DataStructures.YieldingSpinLock.Enter">
            <summary>
            Acquires the lock if it is free, or waits on it if it is not.
            </summary>
            <remarks>
            The waiting thread will spin (by calling <see cref="M:System.Threading.Thread.SpinWait(System.Int32)"/>) for at most 2500 cycles,
            in steps of 10 cycles, at which point the thread is forced to yield execution with 
            <see cref="M:System.Threading.Thread.Sleep(System.Int32)"><c>Thread.Sleep(1)</c></see>.
            </remarks>
        </member>
        <member name="M:GeoAPI.DataStructures.YieldingSpinLock.Exit">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.DatumType">
            <summary>
            Specifies a type of datum.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.HorizontalMinimum">
            <summary>
            Lowest possible value for horizontal datum types
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.HorizontalOther">
            <summary>
            Unspecified horizontal datum type. Horizontal datums with this type should never
            supply a conversion to WGS84 using Bursa Wolf parameters.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.HorizontalClassic">
            <summary>
            These datums, such as ED50 and NAD27, have been designed to support
            horizontal positions on the ellipsoid as opposed to positions in 3-D space. 
            These datums were designed mainly to support a horizontal component of a position 
            in a domain of limited extent, such as a country, a region or a continent.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.HorizontalGeocentric">
            <summary>
            A geocentric datum is a "satellite age" modern geodetic datum mainly of global
            extent, such as WGS84 (used in GPS), NAD83, PZ90 (used in GLONASS) and ITRF. These
            datums were designed to support both a horizontal component of position and 
            a vertical component of position (through ellipsoidal heights). The regional
            realizations of ITRF, such as ETRF, are also included in this category.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.HorizontalMaximum">
            <summary>
            Highest possible value for horizontal datum types.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalMinimum">
            <summary>
            Lowest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalOther">
            <summary>
            Unspecified vertical datum type.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalOrthometric">
            <summary>
            A vertical datum for orthometric heights that are measured along the plumb line.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalEllipsoidal">
            <summary>
            A vertical datum for ellipsoidal heights that are measured along the normal to
            the ellipsoid used in the definition of horizontal datum.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalAltitudeBarometric">
            <summary>
            The vertical datum of altitudes or heights in the atmosphere. These are
            approximations of orthometric heights obtained with the help of a barometer or
            a barometric altimeter. These values are usually expressed in one of the
            following units: meters, feet, millibars (used to measure pressure levels), or
            theta value (units used to measure geopotential height).
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalNormal">
            <summary>
            A normal height system.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalGeoidModelDerived">
            <summary>
            A vertical datum of geoid model derived heights, also called GPS-derived heights.
            These heights are approximations of orthometric heights (H), constructed from the
            ellipsoidal heights (h) by the use of the given geoid undulation model (N) 
            through the equation: H=h-N.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalDepth">
            <summary>
            This attribute is used to support the set of datums generated for hydrographic
            engineering projects where depth measurements below sea level are needed. It is
            often called a hydrographic or a marine datum. Depths are measured in the 
            direction perpendicular (approximately) to the actual equipotential surfaces of
            the earth's gravity field, using such procedures as echo-sounding.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.VerticalMax">
            <summary>
            Highest possible value for vertical datum types.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.LocalMinimum">
            <summary>
            Lowest possible value for local datum types.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.DatumType.LocalMaximum">
            <summary>
            Highest possible value for local datum types.
            </summary>
        </member>
        <member name="T:GeoAPI.Geometries.IExtents`1">
            <summary>
            Represents an axis-aligned, orthogonal region which can be used to describe the 
            furthest extents of a spatial object (such as an <see cref="T:GeoAPI.Geometries.IGeometry`1"/>
            instance) in its coordinate system.
            </summary>
            <typeparam name="TCoordinate">The type of coordinate to use.</typeparam>
        </member>
        <member name="M:GeoAPI.Geometries.IExtents`1.Contains(`0)">
            <summary>  
            Returns <see langword="true"/> if the given point lies in or on the extent.
            </summary>
            <param name="coordinate"> the point which this <see cref="T:GeoAPI.Geometries.IExtents`1"/> is
            being checked for containing.</param>
            <returns>    
            <see langword="true"/> if the point lies in the interior or
            on the boundary of this <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IExtents`1.ExpandToInclude(GeoAPI.Geometries.IExtents{`0})">
            <summary>
            Enlarges the boundary of the <see cref="T:GeoAPI.Geometries.IExtents`1"/> so that it contains
            <paramref name="other"/>. Does nothing if <paramref name="other"/> is empty, is null, or
            wholly on or within the boundaries.
            </summary>
            <param name="other">The <see cref="T:GeoAPI.Geometries.IExtents`1"/> to merge with.</param>
        </member>
        <member name="M:GeoAPI.Geometries.IExtents`1.Intersects(`0)">
            <summary>  
            Check if the <paramref name="coordinate"/> overlaps (lies inside) 
            the region of the <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </summary>
            <param name="coordinate">The <typeparamref name="TCoordinate"/> to be tested.</param>
            <returns>
            <see langword="true"/> if the point overlaps the <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IExtents`1.Overlaps(`0)">
            <summary>
            Computes whether this <see cref="T:GeoAPI.Geometries.IExtents`1"/>
            intersects a coordinate.
            </summary>
            <param name="coordinate">
            A <typeparamref name="TCoordinate"/> to test for overlap.
            </param>
            <returns>
            <see langword="true"/> if the <typeparamref name="TCoordinate"/> 
            is contained within the extents, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:GeoAPI.Geometries.IExtents`1.Overlaps(GeoAPI.Geometries.IExtents{`0})">
            <summary>
            Computes whether this <see cref="T:GeoAPI.Geometries.IExtents`1"/>
            intersects another <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </summary>
            <param name="other">
            Another <see cref="T:GeoAPI.Geometries.IExtents`1"/> to test for overlap.
            </param>
            <returns>
            <see langword="true"/> if there is any overlap,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents`1.Center">
            <summary>
            Computes the coordinate of the center of the <see cref="T:GeoAPI.Geometries.IExtents`1"/> 
            (as long as it is non-null).
            </summary>
            <returns>
            The center coordinate of this envelope, 
            or <see langword="null"/> if the envelope is null.
            </returns>.
        </member>
        <member name="P:GeoAPI.Geometries.IExtents`1.Max">
            <summary>
            Gets the maximum coordinate of this <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents`1.Min">
            <summary>
            Gets the minimum coordinate of this <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents`1.Factory">
            <summary> 
            Gets the factory which contains the context in which this extents was created.
            </summary>
            <returns>The factory for the <see cref="T:GeoAPI.Geometries.IExtents`1"/>.</returns>
        </member>
        <member name="T:GeoAPI.Geometries.IGeometryFactory`1">
            <summary>
            Interface to a factory object which creates instances of
            <see cref="T:GeoAPI.Geometries.IGeometry`1"/> and descendents.
            </summary>
            <typeparam name="TCoordinate">Type of coordinate to use.</typeparam>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometryFactory`1.CoordinateFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Coordinates.ICoordinateFactory`1"/> assigned to the
            <see cref="T:GeoAPI.Geometries.IGeometryFactory`1"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometryFactory`1.CoordinateSequenceFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Coordinates.ICoordinateSequenceFactory`1"/> assigned to the
            <see cref="T:GeoAPI.Geometries.IGeometryFactory`1"/>.
            </summary>
        </member>
        <member name="P:GeoAPI.Geometries.IGeometryFactory`1.SpatialReference">
            <summary>
            Gets or sets the spatial reference system to associate with the geometry.
            </summary>
        </member>
        <member name="T:GeoAPI.Diagnostics.Memory">
             Utility functions to report memory usage.
             
             @author mbdavis
            
        </member>
        <member name="M:GeoAPI.DataStructures.Processor.Transform``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and returns the results in a new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:GeoAPI.DataStructures.Processor.Transform``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Executes a function on each item in a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and returns the results in a new <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TItem">The type of the input enumeration members.</typeparam>
            <typeparam name="TResult">The type of the output enumeration members.</typeparam>
        </member>
        <member name="M:GeoAPI.DataStructures.NumberBaseConverter.ConvertAnyToAny(System.String,System.Int32,System.Int32)">
            <summary>
            Convert the given numeric value (passed as <see cref="T:System.String"/>) 
            of the base specified by <paramref name="baseIn"/> to the value specified by 
            <paramref name="baseOut"/>.
            </summary>
            <param name="value">Numeric value to be converted, as <see cref="T:System.String"/>.</param>
            <param name="baseIn">Base of input value.</param>
            <param name="baseOut">Base to use for conversion.</param>
            <returns>Converted value, as String.</returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1">
            <summary>
            Creates math transforms.
            </summary>
            <remarks>
            <para>
            An <see cref="T:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1"/> is a low level 
            factory that is used to create <see cref="T:GeoAPI.CoordinateSystems.Transformations.IMathTransform`1"/> 
            instances. Many high level GIS applications will never need to use a 
            IMathTransformFactory directly; they can use an 
            <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory`1"/> instnace instead. 
            However, the IMathTransformFactory interface is specified here, since it can 
            be used directly by applications that wish to transform other types of 
            coordinates (e.g. color coordinates, or image pixel coordinates).
            </para>
            <para>
            The following comments assume that the same vendor implements the math 
            transform factory interfaces and math transform interfaces.
            </para>
            <para>
            A math transform is an object that actually does the work of applying formulae 
            to coordinate values. The math transform does not know or care how the 
            coordinates relate to positions in the real world. This lack of semantics 
            makes implementing IMathTransformFactory significantly easier than it would 
            be otherwise.
            </para>
            <para>
            For example IMathTransformFactory can create affine math transforms. 
            The affine transform applies a matrix to the coordinates without knowing how 
            what it is doing relates to the real world. So if the matrix scales Z values 
            by a factor of 1000, then it could be converting meters into millimeters, or 
            it could be converting kilometers into meters.
            </para>
            <para>
            Because math transforms have low semantic value (but high mathematical value), 
            programmers who do not have much knowledge of how GIS applications use 
            coordinate systems, or how those coordinate systems relate to the real world 
            can implement IMathTransformFactory.
            </para>
            <para>
            The low semantic content of math transforms also means that they will be 
            useful in applications that have nothing to do with GIS coordinates. 
            For example, a math transform could be used to map color coordinates between 
            different color spaces, such as converting (red, green, blue) 
            colors into (hue, light, saturation) colors.
            </para>
            <para>
            Since a math transform does not know what its source and target coordinate 
            systems mean, it is not necessary or desirable for a math transform object 
            to keep information on its source and target coordinate systems.
            </para>
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.CreateAffineTransform(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Creates an affine transform from a matrix.
            </summary>
            <remarks>
            If the transform's input dimension is M, and output dimension is N, 
            then the matrix will have size [N+1][M+1]. The +1 in the matrix dimensions 
            allows the matrix to do a shift, as well as a rotation. The [M][j] element 
            of the matrix will be the j'th ordinate of the moved origin. The [i][N] 
            element of the matrix will be 0 for i less than M, and 1 for i equals M.
            </remarks>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.CreateConcatenatedTransform(GeoAPI.CoordinateSystems.Transformations.IMathTransform{`0},GeoAPI.CoordinateSystems.Transformations.IMathTransform{`0})">
            <summary>
            Creates a transform by concatenating two existing transforms. A concatenated 
            transform acts in the same way as applying two transforms, one after the other.
            </summary>
            <remarks>
            The dimension of the output space of the first transform must match the dimension 
            of the input space in the second transform. If you wish to concatenate more than 
            two transforms, then you can repeatedly use this method.
            </remarks>
            <param name="transform1"></param>
            <param name="transform2"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.CreateFromWkt(System.String)">
            <summary>
            Creates a math transform from a Well-Known Text string.
            </summary>
            <param name="wkt"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.CreateFromXml(System.String)">
            <summary>
            Creates a math transform from XML.
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.CreateParameterizedTransform(System.String,System.Collections.Generic.IEnumerable{GeoAPI.CoordinateSystems.Parameter})">
            <summary>
            Creates a transform from a classification name and parameters.
            </summary>
            <remarks>
            The client must ensure that all the linear parameters are expressed in meters, 
            and all the angular parameters are expressed in degrees. Also, they must 
            supply "semi_major" and "semi_minor" parameters for cartographic projection transforms.
            </remarks>
            <param name="classification"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.CreatePassThroughTransform(System.Int32,GeoAPI.CoordinateSystems.Transformations.IMathTransform{`0})">
            <summary>
            Creates a transform which passes through a subset of ordinates to another transform.
            </summary>
            <remarks>
            This allows transforms to operate on a subset of ordinates. For example, 
            if you have (Lat, Lon, Height) coordinates, then you may wish to convert the 
            height values from meters to feet without affecting the (Lat, Lon) values. 
            If you wanted to affect the (Lat, Lon) values and leave the Height values alone, 
            then you would have to swap the ordinates around to (Height, Lat, Lon). 
            You can do this with an affine map.
            </remarks>
            <param name="firstAffectedOrdinate"></param>
            <param name="subTransform"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.IsParameterAngular(System.String)">
            <summary>
            Tests whether parameter is angular. Clients must ensure that all 
            angular parameter values are in degrees.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IMathTransformFactory`1.IsParameterLinear(System.String)">
            <summary>
            Tests whether parameter is linear. Clients must ensure that all 
            linear parameter values are in meters.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.DomainFlags">
            <summary>
            Flags indicating parts of domain covered by a convex hull. 
            </summary>
            <remarks>
            These flags can be combined. For example, the value 3 
            corresponds to a combination of <see cref="F:GeoAPI.CoordinateSystems.Transformations.DomainFlags.Inside"/> and <see cref="F:GeoAPI.CoordinateSystems.Transformations.DomainFlags.Outside"/>,
            which means that some parts of the convex hull are inside the 
            domain, and some parts of the convex hull are outside the domain.
            </remarks>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.DomainFlags.Inside">
            <summary>
            At least one point in a convex hull is inside the transform's domain.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.DomainFlags.Outside">
            <summary>
            At least one point in a convex hull is outside the transform's domain.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Transformations.DomainFlags.Discontinuous">
            <summary>
            At least one point in a convex hull is not transformed continuously.
            </summary>
            <remarks>
            As an example, consider a "Longitude_Rotation" transform which adjusts 
            longitude coordinates to take account of a change in Prime Meridian. If
            the rotation is 5 degrees east, then the point (Lat=175,Lon=0) is not 
            transformed continuously, since it is on the meridian line which will 
            be split at +180/-180 degrees.
            </remarks>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem`1">
            <summary>
            A one-dimensional coordinate system suitable for vertical measurements.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem.VerticalDatum">
            <summary>
            Gets or sets the vertical datum, which indicates the measurement method.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IVerticalCoordinateSystem.VerticalUnit">
            <summary>
            Gets or sets the units used along the vertical axis.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ILocalCoordinateSystem`1">
            <summary>
            A local coordinate system, with uncertain relationship to the world.
            </summary>
            <remarks>
            In general, a local coordinate system cannot be related to other coordinate 
            systems. However, if two objects supporting this interface have the same dimension, 
            axes, units and datum then client code is permitted to assume that the two coordinate
            systems are identical. This allows several datasets from a common source (e.g. a CAD
            system) to be overlaid. In addition, some implementations of the Coordinate 
            Transformation (CT) package may have a mechanism for correlating local datums. (E.g. 
            from a database of transformations, which is created and maintained from real-world 
            measurements.)
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ILocalCoordinateSystem.LocalDatum">
            <summary>
            Gets or sets the local datum
            </summary>
        </member>
        <member name="T:GeoAPI.Algorithms.Hash">
            <summary>
            Generates hash values for data streams.
            </summary>
        </member>
        <member name="M:GeoAPI.Algorithms.Hash.AsString(System.IO.Stream)">
            <summary>
            Computes a hash value of a stream of data as a <see cref="T:System.String"/>.
            </summary>
            <param name="data">The data to compute the hash for.</param>
            <returns>A <see cref="T:System.String"/> which uniquely identifies the data.</returns>
        </member>
        <member name="T:GeoAPI.Indexing.IndexBalanceHeuristic">
            <summary>
            Heuristics used for tree generation and maintenance.
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.IndexBalanceHeuristic.NodeItemMinimumCount">
            <summary>
            Minimum number of index entries in a node before it is a candiate for splitting
            the node.
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.IndexBalanceHeuristic.NodeItemMaximumCount">
            <summary>
            Number of index entries in a node to target. More than this will cause a split
            if <see cref="P:GeoAPI.Indexing.IndexBalanceHeuristic.MaxTreeDepth"/> is not reached.
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.IndexBalanceHeuristic.MaxTreeDepth">
            <summary>
            The maximum depth of the tree including the root.
            </summary>
        </member>
        <member name="P:GeoAPI.Indexing.IndexBalanceHeuristic.TargetNodeCount">
            <summary>
            The target number of nodes for a split node.
            </summary>
        </member>
        <member name="T:GeoAPI.DataStructures.Pair`2">
            <summary>
            Represents a 2-tuple.
            </summary>
            <typeparam name="TItem1">The type of first item in the tuple.</typeparam>
            <typeparam name="TItem2">The type of second item in the tuple.</typeparam>
        </member>
        <member name="M:GeoAPI.DataStructures.Pair`2.#ctor(`0,`1)">
            <summary>
            Creates a new <see cref="T:GeoAPI.DataStructures.Pair`1"/> with the given values.
            </summary>
            <param name="item1">The first item in the pair.</param>
            <param name="item2">The second item in the pair.</param>
        </member>
        <member name="P:GeoAPI.DataStructures.Pair`2.First">
            <summary>
            Gets the first item in the pair.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Pair`2.Second">
            <summary>
            Gets the second item in the pair.
            </summary>
        </member>
        <member name="T:GeoAPI.IO.NondisposingStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> which holds another stream and delegates all calls to it except for 
            the call to <see cref="M:GeoAPI.IO.NondisposingStream.Dispose(System.Boolean)"/>.
            </summary>
            <remarks>
            This <see cref="T:System.IO.Stream"/> is useful when creating a <see cref="T:System.IO.BinaryReader"/> on a 
            <see cref="T:System.IO.MemoryStream"/> or other lightweight, reusable stream, since the 
            <see cref="T:System.IO.BinaryReader"/> will dispose this stream, and not the underlying stream, 
            allowing it to be repositioned and reused.
            </remarks>
        </member>
        <member name="M:GeoAPI.IO.NondisposingStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of a <see cref="T:GeoAPI.IO.NondisposingStream"/> with the
            given <paramref name="baseStream"/> as the underlying stream to delegate to.
            </summary>
            <param name="baseStream">
            The stream to delegate all calls, 
            except <see cref="M:GeoAPI.IO.NondisposingStream.Dispose(System.Boolean)"/> to.
            </param>
        </member>
        <member name="P:GeoAPI.IO.NondisposingStream.IsDisposed">
            <summary>
            Gets a value indicating if this stream is in a disposed state 
            and therefore is unusable.
            </summary>
        </member>
        <member name="T:GeoAPI.Indexing.INodeSplitStrategy`2">
            <summary>
            Interface for a node splitting strategy used by an updateable spatial index.
            </summary>
        </member>
        <member name="M:GeoAPI.Indexing.INodeSplitStrategy`2.SplitNode(GeoAPI.Indexing.ISpatialIndexNode{`0,`1},GeoAPI.Indexing.IndexBalanceHeuristic)">
            <summary>
            Splits a given node based on the given <paramref name="heuristic"/>.
            </summary>
            <param name="node">The node to split.</param>
            <param name="heuristic">The heuristic used to compute the node split.</param>
            <returns>The new node split off from <paramref name="node"/>.</returns>
        </member>
        <member name="P:GeoAPI.Geometries.IHasGeometryComponents`1.Components">
            <summary>
            Performs an operation with or on this Geometry and its
            component Geometry's. Only GeometryCollections and
            Polygons have component Geometry's; for Polygons they are the LinearRings
            of the shell and holes.
            </summary>
        </member>
        <member name="T:GeoAPI.DataStructures.Triple`1">
            <summary>
            Represents a 3-tuple.
            </summary>
            <typeparam name="TItem">The type of item in the tuple.</typeparam>
        </member>
        <member name="M:GeoAPI.DataStructures.Triple`1.#ctor(`0,`0,`0)">
            <summary>
            Creates a new <see cref="T:GeoAPI.DataStructures.Triple`1"/> with the given values.
            </summary>
            <param name="item1">The first item in the triple.</param>
            <param name="item2">The second item in the triple.</param>
            <param name="item3">The third item in the triple.</param>
        </member>
        <member name="P:GeoAPI.DataStructures.Triple`1.First">
            <summary>
            Gets the first item in the triple.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Triple`1.Second">
            <summary>
            Gets the second item in the triple.
            </summary>
        </member>
        <member name="P:GeoAPI.DataStructures.Triple`1.Third">
            <summary>
            Gets the third item in the triple.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IAxisInfo.Name">
            <summary>
            Human readable name for axis. 
            Possible values are X, Y, Long, Lat or any other short string.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IAxisInfo.Orientation">
            <summary>
            Gets enumerated value for orientation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GeoAPI.Coordinates.ICoordinateSequence`1" -->
        <member name="M:GeoAPI.Coordinates.ICoordinateSequence.ToArray">
            <summary>
            Creates an array of all the <see name="ICoordinate"/>
            instances in this <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>.
            </summary>
            <remarks>
            Returns (possibly copies of) the Coordinates in this collection.
            Whether or not the Coordinates returned are the actual underlying
            Coordinates or merely copies depends on the implementation.
            <para>
            Note that if the implementation does not store its data as an array of 
            <see name="ICoordinate"/> instances,
            this method may incur a significant performance penalty 
            because the array needs to be built from scratch. This may or may
            not be an issue - measure to determine if it affects your situation.
            </para>
            </remarks>
            <returns>An array of <see name="ICoordinate"/> instances.</returns>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequence.ExpandExtents(GeoAPI.Geometries.IExtents)">
            <summary>
            Expands the given <see cref="T:GeoAPI.Geometries.IExtents"/> to include the coordinates 
            in the sequence.
            </summary>
            <remarks>
            Allows implementing classes to optimize access to coordinate values.
            </remarks>
            <param name="extents">The <see cref="T:GeoAPI.Geometries.IExtents"/> instance to expand.</param>
            <returns>
            An envelope which minimally encompasses all the coordinates in this 
            <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>.
            </returns>       
        </member>
        <member name="P:GeoAPI.Coordinates.ICoordinateSequence.Dimension">
            <summary>
            Returns the dimension (number of ordinates in each coordinate) 
            for this sequence.
            </summary>
        </member>
        <member name="P:GeoAPI.Coordinates.ICoordinateSequence.Item(System.Int32,GeoAPI.Coordinates.Ordinates)">
            <summary>
            Gets or sets the ordinate of a coordinate in this sequence.      
            </summary>
            <param name="index">The coordinate index in the sequence.</param>
            <param name="ordinate">
            The ordinate index in the coordinate.
            </param>
            <returns></returns>       
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequence`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
            <summary>
            Adds a range of coordinates to the sequence.
            </summary>
            <param name="coordinates">The coordinates to add.</param>
            <param name="allowRepeated">
            Value to determine whether repeated coordinates should be added (<see langword="true"/>)
            or skipped (<see langword="false"/>).
            </param>
            <param name="reverse">
            Value to determine whether coordinates are added in the reverse order of which they are 
            specified in <paramref name="coordinates"/>.
            </param>
            <returns>
            The same instance of the <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>, with the 
            <paramref name="coordinates"/> added.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequence`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of coordinates to the sequence.
            </summary>
            <param name="coordinates">The coordinates to add.</param>
            <returns>
            The same instance of the <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>, with the 
            <paramref name="coordinates"/> added.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequence`1.ExpandExtents(GeoAPI.Geometries.IExtents{`0})">
            <summary>
            Expands the given Envelope to include the coordinates in the sequence.
            </summary>
            <remarks>
            Allows implementing classes to optimize access to coordinate values.
            </remarks>
            <param name="extents">
            The <see cref="T:GeoAPI.Geometries.IExtents`1"/> instance to expand.
            </param>
            <returns>
            An envelope which minimally encompasses all the coordinates in this 
            <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>.
            </returns>
        </member>
        <member name="M:GeoAPI.Coordinates.ICoordinateSequence`1.ToArray">
            <summary>
            Creates an array of all the <typeparamref name="TCoordinate"/>
            instances in this <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/>.
            </summary>
            <remarks>
            Returns (possibly copies of) the Coordinates in this collection.
            Whether or not the Coordinates returned are the actual underlying
            Coordinates or merely copies depends on the implementation.
            <para>
            Note that if the implementation does not store its data as an array of 
            <typeparamref name="TCoordinate"/> instances,
            this method may incur a significant performance penalty 
            because the array needs to be built from scratch. This may or may
            not be an issue - measure to determine if it affects your situation.
            </para>
            </remarks>
            <returns>
            An array of <typeparamref name="TCoordinate"/> instances.
            </returns>
        </member>
        <member name="P:GeoAPI.Coordinates.ICoordinateSequence`1.IncreasingDirection">
            <summary>
            Determines which orientation of the 
            <see cref="T:GeoAPI.Coordinates.ICoordinateSequence`1"/> sequence is (overall) increasing.
            In other words, determines which end of the array is "smaller"
            (using the standard ordering on <typeparamref name="TCoordinate"/>).
            Returns an integer indicating the increasing direction.
            If the sequence is a palindrome, it is defined to be
            oriented in a positive direction.
            </summary>
            <returns>
            <value>1</value> if the sequence is smaller at the start or is a palindrome,
            <value>-1</value> if smaller at the end.
            </returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IProjection">
            <summary>
            The IProjection interface defines the standard information stored with projection
            objects. 
            </summary>
            <remarks>
            A projection object implements a coordinate transformation from a geographic
            coordinate system to a projected coordinate system, given the ellipsoid for the
            geographic coordinate system. Each coordinate transformation of
            interest, (e.g., Transverse Mercator, Lambert, etc.) should be implemented as a subclass of
            some common base class (e.g., Projection) which implements the IProjection interface.
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjection.ParameterCount">
            <summary>
            Gets number of parameters of the projection.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjection.ProjectionClassName">
            <summary>
            Gets the projection classification name (e.g. 'Transverse_Mercator').
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjection.Item(System.Int32)">
            <summary>
            Gets an indexed parameter of the projection.
            </summary>
            <param name="index">Index of parameter</param>
            <returns>
            The <see cref="T:GeoAPI.CoordinateSystems.ProjectionParameter"/> instance stored at the given <paramref name="index"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index"/> is less than 0 or greater than 
            or equal to <see cref="P:GeoAPI.CoordinateSystems.IProjection.ParameterCount"/>.
            </exception>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IProjection.Item(System.String)">
            <summary>
            Gets a named parameter of the projection.
            </summary>
            <remarks>The parameter name is case insensitive.</remarks>
            <param name="name">Name of parameter.</param>
            <returns>
            The <see cref="T:GeoAPI.CoordinateSystems.ProjectionParameter"/> with the given <paramref name="name"/> 
            or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ILocalDatum">
            <summary>
            Represents a local datum.
            </summary>
            <remarks>
            If two local datum objects have the same datum type and name, 
            then they can be considered equal. This means that coordinates can be
            transformed between two different local coordinate systems, as Int64 as
            they are based on the same local datum.
            </remarks>
        </member>
        <member name="M:GeoAPI.Indexing.IUpdatableSpatialIndex`2.Clear">
            <summary> 
            Removes a single item from the tree.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><see langword="true"/> if the item was found.</returns>
        </member>
        <member name="T:GeoAPI.Indexing.IItemInsertStrategy`2">
            <summary>
            Interface for a strategy to insert new entries into an updatable spatial index.
            </summary>
            <typeparam name="TBounds">Type of bounds used to contain the entries.</typeparam>
            <typeparam name="TItem">The type of the index entries.</typeparam>
        </member>
        <member name="M:GeoAPI.Indexing.IItemInsertStrategy`2.Insert(`0,`1,GeoAPI.Indexing.ISpatialIndexNode{`0,`1},GeoAPI.Indexing.INodeSplitStrategy{`0,`1},GeoAPI.Indexing.IndexBalanceHeuristic,GeoAPI.Indexing.ISpatialIndexNode{`0,`1}@)">
            <summary>
            Inserts a new item into the spatial index.
            </summary>
            <param name="bounds">The bounds of the entry.</param>
            <param name="entry">The entry to insert.</param>
            <param name="node">The next node at which to try the insert.</param>
            <param name="nodeSplitStrategy">
            An <see cref="T:GeoAPI.Indexing.INodeSplitStrategy`2"/> used to split the node if it overflows.
            </param>
            <param name="heuristic">The heuristic used to balance the insert or compute the node split.</param>
            <param name="newSiblingFromSplit">A possible new node from a node-split.</param>
        </member>
        <member name="T:GeoAPI.Geometries.Locations">
            <summary>
            An enumeration of possible relations any given point can have with 
            a geometry.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.Locations.Interior">
            <summary>
            DE-9IM row index of the interior of the first point and column index of
            the interior of the second point. Location value for the interior of a
            point.
            </summary>
            <value>0</value>
        </member>
        <member name="F:GeoAPI.Geometries.Locations.Boundary">
            <summary>
            DE-9IM row index of the boundary of the first point and column index of
            the boundary of the second point. Location value for the boundary of a
            point.
            </summary>
            <value>1</value>
        </member>
        <member name="F:GeoAPI.Geometries.Locations.Exterior">
            <summary>
            DE-9IM row index of the exterior of the first point and column index of
            the exterior of the second point. Location value for the exterior of a
            point.
            </summary>
            <value>2</value>
        </member>
        <member name="F:GeoAPI.Geometries.Locations.None">
            <summary>
            Used for uninitialized location values.
            </summary>
            <value>0x80</value>
        </member>
        <member name="T:GeoAPI.Geometries.LocationTypeConverter">
            <summary>
            Converts between a <see cref="T:GeoAPI.Geometries.Locations"/> value and a <see cref="T:System.Char"/>
            which describes it.
            </summary>
        </member>
        <member name="M:GeoAPI.Geometries.LocationTypeConverter.ToLocationSymbol(GeoAPI.Geometries.Locations)">
            <summary>
            Converts the location value to a location symbol, for example, 
            <see cref="F:GeoAPI.Geometries.Locations.Exterior"/> =&gt; 'e'.
            </summary>
            <param name="locationValue">
            The <see cref="T:GeoAPI.Geometries.Locations"/> value to convert.
            </param>
            <returns>Either 'e', 'b', 'i' or '-'.</returns>
        </member>
        <member name="M:GeoAPI.Geometries.LocationTypeConverter.ToLocationValue(System.Char)">
            <summary>
            Converts a <see cref="T:System.Char"/> value in the set { 'e', 'b', 'i', '-' } or
            { 'E', 'B', 'I', '-' } to the values <see cref="F:GeoAPI.Geometries.Locations.Exterior"/>,
            <see cref="F:GeoAPI.Geometries.Locations.Boundary"/>, <see cref="F:GeoAPI.Geometries.Locations.Interior"/> or 
            <see cref="F:GeoAPI.Geometries.Locations.None"/>, respectively.
            </summary>
            <param name="locationSymbol">The <see cref="T:System.Char"/> to convert.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="locationSymbol"/> isn't in one of the sets
            { 'e', 'b', 'i', '-' } or { 'E', 'B', 'I', '-' }.
            </exception>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents2D.XMin">
            <summary>
            Returns the <see cref="T:GeoAPI.Geometries.IExtents`1"/>s minimum x-value.
            </summary>
            <returns>The minimum x-coordinate.</returns>
            <remarks>
            <see cref="P:GeoAPI.Geometries.IExtents2D.XMin"/> &gt; <see cref="P:GeoAPI.Geometries.IExtents2D.XMax"/> indicates that this is an empty 
            <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </remarks>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents2D.XMax">
            <summary>
            Returns the <see cref="T:GeoAPI.Geometries.IExtents`1"/>s maximum x-value. 
            </summary>
            <returns>The maximum x-coordinate.</returns>
            <remarks>
            <see cref="P:GeoAPI.Geometries.IExtents2D.XMin"/> &gt; <see cref="P:GeoAPI.Geometries.IExtents2D.XMax"/> indicates that this is an empty 
            <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </remarks>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents2D.YMin">
            <summary>
            Returns the <see cref="T:GeoAPI.Geometries.IExtents`1"/>s minimum y-value. 
            </summary>
            <returns>The minimum y-coordinate.</returns>
            <remarks>
            <see cref="P:GeoAPI.Geometries.IExtents2D.YMin"/> &gt; <see cref="P:GeoAPI.Geometries.IExtents2D.YMax"/> indicates that this is an empty 
            <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </remarks>
        </member>
        <member name="P:GeoAPI.Geometries.IExtents2D.YMax">
            <summary>
            Returns the <see cref="T:GeoAPI.Geometries.IExtents`1"/>s maximum y-value.
            </summary>
            <returns>The maximum y-coordinate.</returns>
            <remarks>
            <see cref="P:GeoAPI.Geometries.IExtents2D.YMin"/> &gt; <see cref="P:GeoAPI.Geometries.IExtents2D.YMax"/> indicates that this is an empty 
            <see cref="T:GeoAPI.Geometries.IExtents`1"/>.
            </remarks>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IVerticalDatum">
            <summary>
            Procedure used to measure vertical distances.
            </summary>
        </member>
        <member name="T:GeoAPI.DataStructures.Slice">
            <summary>
            A class of methods to act on instances of <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            to get specific items or sets of items in the enumeration.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation`1">
            <summary>
            Describes a coordinate transformation. This interface only describes a 
            coordinate transformation, it does not actually perform the transform 
            operation on points. To transform points you must use a math transform.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation`1.MathTransform">
            <summary>
            Gets math transform.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation`1.Source">
            <summary>
            Source coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation`1.Target">
            <summary>
            Target coordinate system.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem`1">
            <summary>
            An aggregate of two coordinate systems (CRS). One of these is usually a 
            CRS based on a two dimensional coordinate system such as a geographic or
            a projected coordinate system with a horizontal datum. The other is a 
            vertical CRS which is a one-dimensional coordinate system with a vertical
            datum.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem`1.HeadCoordinateSystem">
            <summary>
            Gets first sub-coordinate system.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ICompoundCoordinateSystem`1.TailCoordinateSystem">
            <summary>
            Gets second sub-coordinate system.
            </summary>
        </member>
        <member name="T:GeoAPI.Algorithms.QuickSort">
            <summary>
            Implements the well-known quick sort algorithm.
            </summary>
        </member>
        <member name="M:GeoAPI.Algorithms.QuickSort.Sort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts a list in-place, given the <paramref name="comparison"/>
            method.
            </summary>
            <typeparam name="T">Type of element in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The method used to compare list elements.</param>
        </member>
        <member name="T:GeoAPI.Geometries.OgcGeometryType">
            <summary>
            Specifies the geometry type according to the OGC Simple Features
            for SQL specification.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.Geometry">
            <summary>
            Geometry is the root class of the hierarchy. 
            Geometry is an abstract (non-instantiable) class.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.Point">
            <summary>
            A Point is a 0-dimensional geometry and represents 
            a single location in coordinate space.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.Curve">
            <summary>
            A curve is a one-dimensional geometric object 
            usually stored as a sequence of points,
            with the subtype of curve specifying the form 
            of the interpolation between points.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.LineString">
            <summary>
            A LineString is a curve with linear interpolation 
            between points. Each consecutive
            pair of points defines a line segment.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.Surface">
            <summary>
            A Surface is a two-dimensional geometric Object.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.Polygon">
            <summary>
            A Polygon is a planar surface, defined by 1 
            exterior boundary and 0 or more interior
            boundaries. Each interior boundary defines a 
            hole in the polygon.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.GeometryCollection">
            <summary>
            A GeometryCollection is a geometry that is a 
            collection of 1 or more geometries.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.MultiPoint">
            <summary>
            A MultiPoint is a 0 dimensional geometric 
            collection. The elements of a MultiPoint
            are restricted to Points. The points are 
            not connected or ordered.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.MultiCurve">
            <summary>
            A MultiCurve is a one-dimensional GeometryCollection 
            whose elements are Curves.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.MultiLineString">
            <summary>
            A MultiLineString is a MultiCurve whose 
            elements are LineStrings.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.MultiSurface">
            <summary>
            A MultiSurface is a two-dimensional geometric 
            collection whose elements are
            surfaces. The interiors of any two surfaces in a 
            MultiSurface may not intersect.
            The boundaries of any two elements in a MultiSurface 
            may intersect at most at a
            finite number of points.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.MultiPolygon">
            <summary>
            A MultiPolygon is a MultiSurface whose elements are Polygons.
            </summary>
        </member>
        <member name="F:GeoAPI.Geometries.OgcGeometryType.Unknown">
            <summary>
            An unknown geometry type.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Wgs84ConversionInfo">
            <summary>
            Parameters for a geographic transformation into WGS84.
            </summary>
            <remarks>
            <para>
            The Bursa Wolf parameters should be applied to geocentric coordinates, 
            where the X axis points towards the Greenwich Prime Meridian, the Y axis
            points East, and the Z axis points North.
            </para>
            <para>
            These parameters can be used to approximate a transformation from the 
            horizontal datum to the WGS84 datum using a Bursa Wolf transformation. 
            However, it must be remembered that this transformation is only an 
            approximation. For a given horizontal datum, different Bursa Wolf 
            transformations can be used to minimize the errors over different regions.
            </para>
            <para>
            If the DATUM clause contains a TOWGS84 clause, then this should be its 
            "preferred" transformation, which will often be the transformation which 
            gives a broad approximation over the whole area of interest
            (e.g. the area of interest in the containing geographic coordinate system).
            </para>
            <para>
            Sometimes, only the first three or six parameters are defined. In this case 
            the remaining parameters must be zero. If only three parameters are defined, 
            then they can still be plugged into the Bursa Wolf formulas, or you can take a 
            short cut. The Bursa Wolf transformation works on geocentric coordinates, 
            so you cannot apply it onto geographic coordinates directly. If there are 
            only three parameters then you can use the Molodenski or abridged 
            Molodenski formulas.
            </para>
            <para>
            If a datum's ToWgs84Parameters parameter values are zero, then the receiving
            application can assume that the writing application believed that the datum 
            is approximately equal to WGS84.
            </para>
            </remarks>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.#ctor">
            <summary>
            Initializes an instance of Wgs84ConversionInfo with default parameters 
            (all values = 0).
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes an instance of Wgs84ConversionInfo
            </summary>
            <param name="dx">Bursa Wolf shift in meters.</param>
            <param name="dy">Bursa Wolf shift in meters.</param>
            <param name="dz">Bursa Wolf shift in meters.</param>
            <param name="ex">Bursa Wolf rotation in arc seconds.</param>
            <param name="ey">Bursa Wolf rotation in arc seconds.</param>
            <param name="ez">Bursa Wolf rotation in arc seconds.</param>
            <param name="ppm">Bursa Wolf scaling in parts per million.</param>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes an instance of Wgs84ConversionInfo
            </summary>
            <param name="dx">Bursa Wolf shift in meters.</param>
            <param name="dy">Bursa Wolf shift in meters.</param>
            <param name="dz">Bursa Wolf shift in meters.</param>
            <param name="ex">Bursa Wolf rotation in arc seconds.</param>
            <param name="ey">Bursa Wolf rotation in arc seconds.</param>
            <param name="ez">Bursa Wolf rotation in arc seconds.</param>
            <param name="ppm">Bursa Wolf scaling in parts per million.</param>
            <param name="areaOfUse">Area of use for this transformation</param>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.ToString">
            <summary>
            Returns the Well Known Text (WKT) for this object.
            </summary>
            <remarks>The WKT format of this object is: <code>TOWGS84[dx, dy, dz, ex, ey, ez, ppm]</code></remarks>
            <returns>WKT representaion</returns>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Dx">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Dy">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Dz">
            <summary>
            Bursa Wolf shift in meters.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Ex">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Ey">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Ez">
            <summary>
            Bursa Wolf rotation in arc seconds.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Ppm">
            <summary>
            Bursa Wolf scaling in parts per million.
            </summary>
        </member>
        <member name="F:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.AreaOfUse">
            <summary>
            Human readable text describing intended region of transformation.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.GetAffineTransform(NPack.Interfaces.IMatrixFactory{NPack.DoubleComponent})">
            <summary>
            Affine Bursa-Wolf matrix transformation
            </summary>
            <remarks>
            <para>
            Transformation of coordinates from one geographic coordinate system into another 
            (also colloquially known as a "datum transformation") is usually carried out as an 
            implicit concatenation of three transformations:
            </para>
            <para>
            [geographical to geocentric >> geocentric to geocentric >> geocentric to geographic]
            </para>
            <para>
            The middle part of the concatenated transformation, from geocentric to geocentric, is usually 
            described as a simplified 7-parameter Helmert transformation, expressed in matrix form with 7 
            parameters, in what is known as the "Bursa-Wolf" formula:
            </para>
            <para>
            <code>
             S = 1 + Ppm/1000000
             [ Xt ]    [     S   -Rz*S   +Ry*S   Dx ]  [ Xs ]
             [ Yt ]  = [ +Rz*S       S   -Rx*S   Dy ]  [ Ys ]
             [ Zt ]    [ -Ry*S   +Rx*S       S   Dz ]  [ Zs ]
             [ 1  ]    [     0       0       0    1 ]  [ 1  ]
            </code>
            </para>
            <para>
            The parameters are commonly referred to defining the transformation "from source coordinate system 
            to target coordinate system", whereby (XS, YS, ZS) are the coordinates of the point in the source 
            geocentric coordinate system and (XT, YT, ZT) are the coordinates of the point in the target 
            geocentric coordinate system. But that does not define the parameters uniquely; neither is the
            definition of the parameters implied in the formula, as is often believed. However, the 
            following definition, which is consistent with the "Position Vector Transformation" convention, 
            is common E&amp;P survey practice: 
            </para>	
            <para>
            (dX, dY, dZ): Translation vector, to be added to the point's position vector in the source 
            coordinate system in order to transform from source system to target system; also: the coordinates 
            of the origin of source coordinate system in the target coordinate system.
            </para>
            <para>
            (RX, RY, RZ): Rotations to be applied to the point's vector. The sign convention is such that 
            a positive rotation about an axis is defined as a clockwise rotation of the position vector when 
            viewed from the origin of the Cartesian coordinate system in the positive direction of that axis;
            e.g. a positive rotation about the Z-axis only from source system to target system will result in a
            larger longitude value for the point in the target system. Although rotation angles may be quoted in
            any angular unit of measure, the formula as given here requires the angles to be provided in radians.
            </para>
            <para>
            S: The scale correction to be made to the position vector in the source coordinate system in order 
            to obtain the correct scale in the target coordinate system. M = (1 + dS*10-6), whereby dS is the scale
            correction expressed in parts per million.
            </para>
            <para>
            <see href="http://www.posc.org/Epicentre.2_2/DataModel/ExamplesofUsage/eu_cs35.html"/> 
            for an explanation of the Bursa-Wolf transformation.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Equals(GeoAPI.CoordinateSystems.Wgs84ConversionInfo)">
            <summary>
            Checks whether the values of this instance is equal to the values of another instance.
            </summary>
            <param name="other"></param>
            <returns><see langword="true"/> if the parameters are equal, <see langword="false"/> otherwise.</returns>
            <remarks>
            Only parameters used for coordinate system are used for comparison.
            Name, abbreviation, authority, alias and remarks are ignored in the comparison.
            </remarks>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Wkt">
            <summary>
            Returns the Well Known Text (WKT) for this object.
            </summary>
            <remarks>The WKT format of this object is: <code>TOWGS84[dx, dy, dz, ex, ey, ez, ppm]</code></remarks>
            <returns>WKT representaion</returns>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.Xml">
            <summary>
            Gets an XML representation of this object
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Wgs84ConversionInfo.HasZeroValuesOnly">
            <summary>
            Returns true of all 7 parameter values are 0.0
            </summary>
            <returns></returns>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.ILinearUnit">
            <summary>
            The ILinearUnit interface defines methods on linear units.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.ILinearUnit.MetersPerUnit">
            <summary>
            Gets or sets the number of meters per <see cref="T:GeoAPI.CoordinateSystems.ILinearUnit"/>.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.Transformations.IGeographicTransform`1">
            <summary>
            The IGeographicTransform interface is implemented on geographic transformation
            objects and implements datum transformations between geographic coordinate systems.
            </summary>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IGeographicTransform`1.Forward(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms an array of points from the source geographic coordinate system
            to the target geographic coordinate system.
            </summary>
            <param name="points">Points in the source geographic coordinate system</param>
            <returns>Points in the target geographic coordinate system</returns>
        </member>
        <member name="M:GeoAPI.CoordinateSystems.Transformations.IGeographicTransform`1.Inverse(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Transforms an array of points from the target geographic coordinate system
            to the source geographic coordinate system.
            </summary>
            <param name="points">Points in the target geographic coordinate system</param>
            <returns>Points in the source geographic coordinate system</returns>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IGeographicTransform`1.Source">
            <summary>
            Gets or sets source geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IGeographicTransform`1.Target">
            <summary>
            Gets or sets the target geographic coordinate system for the transformation.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.Transformations.IGeographicTransform`1.ParameterInfo">
            <summary>
            Returns an accessor interface to the parameters for this geographic transformation.
            </summary>
        </member>
        <member name="T:GeoAPI.CoordinateSystems.IEllipsoid">
            <summary>
            The IEllipsoid interface defines the standard information stored with ellipsoid objects.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IEllipsoid.SemiMajorAxis">
            <summary>
            Gets or sets the value of the semi-major axis.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IEllipsoid.SemiMinorAxis">
            <summary>
            Gets or sets the value of the semi-minor axis.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IEllipsoid.InverseFlattening">
            <summary>
            Gets or sets the value of the inverse of the flattening constant of the ellipsoid.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IEllipsoid.AxisUnit">
            <summary>
            Gets or sets the value of the axis unit.
            </summary>
        </member>
        <member name="P:GeoAPI.CoordinateSystems.IEllipsoid.IsIvfDefinitive">
            <summary>
            Gets or sets a value indicating whether the inverse flattening 
            is definitive for this ellipsoid.
            </summary>
            <remarks>
            Some ellipsoids use the IVF as the defining value, and calculate 
            the polar radius whenever asked. Other ellipsoids use the polar radius 
            to calculate the IVF whenever asked. This distinction can be important 
            to avoid floating-point rounding errors.
            </remarks>
        </member>
    </members>
</doc>
