<?xml version="1.0" encoding="utf-8" ?>
<project name="sample1">
  <scriptEngine language="Python" Class="MogreGis.IronPythonScriptEngine" Assembly="../../../PythonScriptEngine/bin/Debug/PythonScriptEngine.dll"/>
  <mogreRender>
    <backgroundColor>vec4(0.1f, 0.3f, 0.6f, 0.0f)</backgroundColor>
    <resources>
      <ressourceLocation name="./CgResources/Chapter3"  type="FileSystem" group= "General"/>
    </resources>
    <Camera>
      <property name="Position" value="-300, 500, 0"/>
      <property name="LookUp" value="0, 0, 0"/>
    </Camera>
  </mogreRender>

  <!-- Define an SRS based on an OSG WKT description: -->
  <!--<resource type="srs" name="wgs84">
    GEOGCS["WGS84",DATUM["WGS_1984",SPHEROID["WGS84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9108"]],AXIS["Lat",NORTH],AXIS["Long",EAST],AUTHORITY["EPSG","4326"]]
  </resource>-->

  <resource type="srs" name="wgs84">
    GEOGCS["NAD27(76)",
    DATUM["North_American_Datum_1927_1976",
    SPHEROID["Clarke 1866",6378206.4,294.9786982138982,
    AUTHORITY["EPSG","7008"]],
    AUTHORITY["EPSG","6608"]],
    PRIMEM["Greenwich",0,
    AUTHORITY["EPSG","8901"]],
    UNIT["degree",0.01745329251994328,
    AUTHORITY["EPSG","9122"]],
    AUTHORITY["EPSG","4608"]],
    UNIT["metre",1,
    AUTHORITY["EPSG","9001"]],
    PROJECTION["Transverse_Mercator"],
    PARAMETER["latitude_of_origin",0],
    PARAMETER["central_meridian",-81],
    PARAMETER["scale_factor",0.9996],
    PARAMETER["false_easting",500000],
    PARAMETER["false_northing",0],
    AUTHORITY["EPSG","2029"],
    AXIS["Easting",EAST],
    AXIS["Northing",NORTH]
  </resource>

  <resource type="srs" name="NAD83">
    GEOGCS["NAD83",DATUM["North_American_Datum_1983",SPHEROID["GRS 1980",6378137,298.257222101,AUTHORITY["EPSG","7019"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6269"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9108"]],AXIS["Lat",NORTH],AXIS["Long",EAST],AUTHORITY["EPSG","4269"]],PROJECTION["Lambert_Conformal_Conic_2SP"],PARAMETER["standard_parallel_1",41.2],PARAMETER["standard_parallel_2",41.86666666666667],PARAMETER["latitude_of_origin",40.83333333333334],PARAMETER["central_meridian",-72.75],PARAMETER["false_easting",999999.9999960001],PARAMETER["false_northing",499999.999998],UNIT["unknown",0.3048006096012192]
  </resource>

  <script language="python" name="Lambert">
def Lambert ():
    return 'GEOGCS["NTF (Paris)",DATUM["Nouvelle Triangulation Francaise (Paris)",SPHEROID["Clarke 1880 (IGN)", 6378249.2, 293.4660212936269,AUTHORITY["EPSG","7011"]],AUTHORITY["EPSG","6807"]],PRIMEM["Paris", 2.5969213, AUTHORITY["EPSG","8903"]],UNIT["grade", 0.015707963267948967],AXIS["Geodetic latitude", NORTH],AXIS["Geodetic longitude", EAST],AUTHORITY["EPSG","4807"]],PROJECTION["Lambert Conic Conformal (1SP)", AUTHORITY["EPSG","9801"]],PARAMETER["central_meridian", 0.0],PARAMETER["latitude_of_origin", 52.0],PARAMETER["scale_factor", 0.99987742],PARAMETER["false_easting", 600000.0],PARAMETER["false_northing", 2200000.0],UNIT["m", 1.0],AXIS["Easting", EAST],AXIS["Northing", NORTH],AUTHORITY["EPSG","27572"]'
  </script>

  <script language="python" name="Mercator">
def Mercator ():
    return 'PROJCS["Mercator Spheric", GEOGCS["WGS84basedSpheric_GCS", DATUM["WGS84basedSpheric_Datum", SPHEROID["WGS84based_Sphere", 6378137, 0], TOWGS84[0, 0, 0, 0, 0, 0, 0]], PRIMEM["Greenwich", 0, AUTHORITY["EPSG", "8901"]], UNIT["degree", 0.0174532925199433, AUTHORITY["EPSG", "9102"]], AXIS["E", EAST], AXIS["N", NORTH]], PROJECTION["Mercator"], PARAMETER["False_Easting", 0], PARAMETER["False_Northing", 0], PARAMETER["Central_Meridian", 0], PARAMETER["Latitude_of_origin", 0], UNIT["metre", 1, AUTHORITY["EPSG", "9001"]], AXIS["East", EAST], AXIS["North", NORTH]]'
  </script>
  <script language="python" name="script1">
    vec4(1,2,3,4)
  </script>

  <script language="python" name="scriptColor">
def Color ():
    return vector3((feature.row['POPDENS']/1000.0),1-(feature.row['POPDENS']/300.0),0)
  </script>

  <!--<script language="python" name="script2">
def SelectSpain():
    return feature.row["NAME"].ToString().ToLowerInvariant() == "spain"
  </script>-->

  <map name="default" terrain="full">
    <maplayer name="world_countries"/>
  </map>

  <!-- A layer is a primary build target: -->
  <layer name="cities" source="cities">
    <slice min_range="0" max_range="1e6" graph="countries"/>
  </layer>

  <!-- A source references a vector GIS source layer:  -->
  <source name="cities" provider="ShapeFile">
    <!--<uri>../../../data/latlong.shp</uri>
    <project>../../../data/latlong.prj</project>-->
    <uri>../../../data/countries.shp</uri>
    <project>../../../data/countries.prj</project>
  </source>


  <graph name="cities">
    <!--<filter type="TransformFilter">
      <property name="translate" value=""/>
      <property name="" value=""/>
      <property name="" value=""/>
    </filter>-->
    <!--<filter type="AreaFilter">
      <property name="longitudeMin" value="-10"/>
      <property name="longitudeMax" value="4"/>
      <property name="latitudeMin" value="35"/>
      <property name="latitudeMax" value="44"/>
    </filter>-->
    <!--<filter type="AttributeFilter">
      <property name="attributeName" value="NAME"/>
      <property name="attributeValue" value="spain"/>
    </filter>-->
    <!--<filter type="ScriptFilter">
      <property name="Condition" value="SelectSpain()"/>
    </filter>-->
    <!--<filter type="ScriptFilter">
      <property name="Condition" value="feature.row.get("NAME") == "spain"/>
    </filter>-->
    <!--<filter type="TransformFilter">
      <property name="translate" value="Mercator()"/>
    </filter>-->
    <filter type="BuildGeomFilter" >
      <property name="color" value="Color()"/>
      <property name="pointNameEntityINI" value="ogrehead.mesh"/>
      <property name="pointNameEntities" value="ogrehead.mesh"/>
      <property name="pointEntityScale" value="vec3(0.1,0.1,0.1)"/>
      <!--<property name="distancesScale" value="vec3(0.00001,0.00001,0.00001)"/>-->
      <!--<property name="nameMaterial" value="ocean.material"/>-->
      <property name="nameMaterial" value="CgTutorials/C3E5_Materialv2"/>
    </filter>
  </graph>


  <!--  A filter graph defines the assembly pipeline for turning features into 3D geometry:  -->

  <!--<graph name="countries">
    <filter type="TransformFilter">
      <property name="translate" value vec3(1,1,1)/>
      <property name="srs" value="NAD83"/>
    </filter>
  </graph>-->

</project>